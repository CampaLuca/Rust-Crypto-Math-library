{"message":"unused import: `num_bigint::BigInt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":29,"byte_end":47,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":25,"byte_end":48,"line_start":3,"line_end":3,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_bigint::BigInt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/polynomial.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_bigint::BigInt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::numbers::Class`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":54,"byte_end":84,"line_start":5,"line_end":5,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::Class;","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":50,"byte_end":85,"line_start":5,"line_end":5,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::Class;","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::numbers::Class`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/polynomial.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::Class;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::numbers::Number`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":129,"byte_end":160,"line_start":7,"line_end":7,"column_start":5,"column_end":36,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::Number;","highlight_start":5,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":125,"byte_end":161,"line_start":7,"line_end":7,"column_start":1,"column_end":37,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::Number;","highlight_start":1,"highlight_end":37}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::numbers::Number`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/polynomial.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::Number;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::poly::instances::monomial_instance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":249,"byte_end":290,"line_start":10,"line_end":10,"column_start":5,"column_end":46,"is_primary":true,"text":[{"text":"use crate::poly::instances::monomial_instance;","highlight_start":5,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":245,"byte_end":291,"line_start":10,"line_end":10,"column_start":1,"column_end":47,"is_primary":true,"text":[{"text":"use crate::poly::instances::monomial_instance;","highlight_start":1,"highlight_end":47}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::poly::instances::monomial_instance`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/polynomial.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::poly::instances::monomial_instance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::variables::vars::Var`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":430,"byte_end":457,"line_start":13,"line_end":13,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"use crate::variables::vars::Var;","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/polynomial.rs","byte_start":426,"byte_end":458,"line_start":13,"line_end":13,"column_start":1,"column_end":33,"is_primary":true,"text":[{"text":"use crate::variables::vars::Var;","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::variables::vars::Var`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/polynomial.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::variables::vars::Var;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_bigint::BigInt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":52,"byte_end":70,"line_start":4,"line_end":4,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":48,"byte_end":71,"line_start":4,"line_end":4,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_bigint::BigInt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/univariate_polynomial.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_bigint::BigInt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_traits::Num`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":76,"byte_end":91,"line_start":5,"line_end":5,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use num_traits::Num;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":72,"byte_end":92,"line_start":5,"line_end":5,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"use num_traits::Num;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_traits::Num`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/univariate_polynomial.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_traits::Num;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::arith::random::get_random_bigint_with_bounds`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":227,"byte_end":278,"line_start":9,"line_end":9,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"use crate::arith::random::get_random_bigint_with_bounds;","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":223,"byte_end":279,"line_start":9,"line_end":9,"column_start":1,"column_end":57,"is_primary":true,"text":[{"text":"use crate::arith::random::get_random_bigint_with_bounds;","highlight_start":1,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::arith::random::get_random_bigint_with_bounds`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/univariate_polynomial.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::arith::random::get_random_bigint_with_bounds;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::instances::RR_instance::RRinstance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":284,"byte_end":334,"line_start":10,"line_end":10,"column_start":5,"column_end":55,"is_primary":true,"text":[{"text":"use crate::numbers::instances::RR_instance::RRinstance;","highlight_start":5,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":280,"byte_end":335,"line_start":10,"line_end":10,"column_start":1,"column_end":56,"is_primary":true,"text":[{"text":"use crate::numbers::instances::RR_instance::RRinstance;","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::instances::RR_instance::RRinstance`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/univariate_polynomial.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::instances::RR_instance::RRinstance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::instances::ZZ_instance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":340,"byte_end":378,"line_start":11,"line_end":11,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"use crate::numbers::instances::ZZ_instance;","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":336,"byte_end":379,"line_start":11,"line_end":11,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"use crate::numbers::instances::ZZ_instance;","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::instances::ZZ_instance`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/univariate_polynomial.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::instances::ZZ_instance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::utilities`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":736,"byte_end":752,"line_start":19,"line_end":19,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use crate::utilities;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":732,"byte_end":753,"line_start":19,"line_end":19,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"use crate::utilities;","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::utilities`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/univariate_polynomial.rs:19:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::utilities;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::algebras::Rings::classes::PolynomialRing::PolynomialRing`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":910,"byte_end":973,"line_start":24,"line_end":24,"column_start":5,"column_end":68,"is_primary":true,"text":[{"text":"use crate::algebras::Rings::classes::PolynomialRing::PolynomialRing;","highlight_start":5,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":906,"byte_end":974,"line_start":24,"line_end":24,"column_start":1,"column_end":69,"is_primary":true,"text":[{"text":"use crate::algebras::Rings::classes::PolynomialRing::PolynomialRing;","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::algebras::Rings::classes::PolynomialRing::PolynomialRing`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/univariate_polynomial.rs:24:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::algebras::Rings::classes::PolynomialRing::PolynomialRing;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::algebras::Rings::instances::PolynomialRing_instance::PolynomialRingInstance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":979,"byte_end":1061,"line_start":25,"line_end":25,"column_start":5,"column_end":87,"is_primary":true,"text":[{"text":"use crate::algebras::Rings::instances::PolynomialRing_instance::PolynomialRingInstance;","highlight_start":5,"highlight_end":87}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/classes/univariate_polynomial.rs","byte_start":975,"byte_end":1062,"line_start":25,"line_end":25,"column_start":1,"column_end":88,"is_primary":true,"text":[{"text":"use crate::algebras::Rings::instances::PolynomialRing_instance::PolynomialRingInstance;","highlight_start":1,"highlight_end":88}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::algebras::Rings::instances::PolynomialRing_instance::PolynomialRingInstance`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/classes/univariate_polynomial.rs:25:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m25\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::algebras::Rings::instances::PolynomialRing_instance::PolynomialRingInstance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_bigint::BigInt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":29,"byte_end":47,"line_start":3,"line_end":3,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":25,"byte_end":48,"line_start":3,"line_end":3,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_bigint::BigInt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_bigint::BigInt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::numbers::Class`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":54,"byte_end":84,"line_start":5,"line_end":5,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::Class;","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":50,"byte_end":85,"line_start":5,"line_end":5,"column_start":1,"column_end":36,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::Class;","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::numbers::Class`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::Class;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::numbers::ClassInstance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":90,"byte_end":128,"line_start":6,"line_end":6,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::ClassInstance;","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":86,"byte_end":129,"line_start":6,"line_end":6,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::ClassInstance;","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::numbers::ClassInstance`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::ClassInstance;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::variables::vars::Var`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":408,"byte_end":435,"line_start":13,"line_end":13,"column_start":5,"column_end":32,"is_primary":true,"text":[{"text":"use crate::variables::vars::Var;","highlight_start":5,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":404,"byte_end":436,"line_start":13,"line_end":13,"column_start":1,"column_end":33,"is_primary":true,"text":[{"text":"use crate::variables::vars::Var;","highlight_start":1,"highlight_end":33}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::variables::vars::Var`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::variables::vars::Var;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::numbers::ClassInstance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/monomial_instance.rs","byte_start":29,"byte_end":67,"line_start":3,"line_end":3,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::ClassInstance;","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/monomial_instance.rs","byte_start":25,"byte_end":68,"line_start":3,"line_end":3,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::ClassInstance;","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::numbers::ClassInstance`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/monomial_instance.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::ClassInstance;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_bigint::BigInt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/monomial_instance.rs","byte_start":189,"byte_end":207,"line_start":7,"line_end":7,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/monomial_instance.rs","byte_start":185,"byte_end":208,"line_start":7,"line_end":7,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_bigint::BigInt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/monomial_instance.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_bigint::BigInt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_traits::Pow`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/monomial_instance.rs","byte_start":305,"byte_end":320,"line_start":11,"line_end":11,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use num_traits::Pow;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/monomial_instance.rs","byte_start":301,"byte_end":321,"line_start":11,"line_end":11,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"use num_traits::Pow;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_traits::Pow`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/monomial_instance.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_traits::Pow;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::any::Any`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":4,"byte_end":17,"line_start":1,"line_end":1,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"use std::any::Any;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":0,"byte_end":18,"line_start":1,"line_end":1,"column_start":1,"column_end":19,"is_primary":true,"text":[{"text":"use std::any::Any;","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::any::Any`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::any::Any;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_bigint::BigInt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":71,"byte_end":89,"line_start":5,"line_end":5,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":67,"byte_end":90,"line_start":5,"line_end":5,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_bigint::BigInt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_bigint::BigInt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_traits::Num`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":95,"byte_end":110,"line_start":6,"line_end":6,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use num_traits::Num;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":91,"byte_end":111,"line_start":6,"line_end":6,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"use num_traits::Num;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_traits::Num`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_traits::Num;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::algebras::FiniteField::classes::Zmod::Zmod`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":117,"byte_end":166,"line_start":8,"line_end":8,"column_start":5,"column_end":54,"is_primary":true,"text":[{"text":"use crate::algebras::FiniteField::classes::Zmod::Zmod;","highlight_start":5,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":113,"byte_end":167,"line_start":8,"line_end":8,"column_start":1,"column_end":55,"is_primary":true,"text":[{"text":"use crate::algebras::FiniteField::classes::Zmod::Zmod;","highlight_start":1,"highlight_end":55}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::algebras::FiniteField::classes::Zmod::Zmod`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::algebras::FiniteField::classes::Zmod::Zmod;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::arith::random::get_random_bigint_with_bounds`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":246,"byte_end":297,"line_start":10,"line_end":10,"column_start":5,"column_end":56,"is_primary":true,"text":[{"text":"use crate::arith::random::get_random_bigint_with_bounds;","highlight_start":5,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":242,"byte_end":298,"line_start":10,"line_end":10,"column_start":1,"column_end":57,"is_primary":true,"text":[{"text":"use crate::arith::random::get_random_bigint_with_bounds;","highlight_start":1,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::arith::random::get_random_bigint_with_bounds`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::arith::random::get_random_bigint_with_bounds;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::instances::RR_instance::RRinstance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":303,"byte_end":353,"line_start":11,"line_end":11,"column_start":5,"column_end":55,"is_primary":true,"text":[{"text":"use crate::numbers::instances::RR_instance::RRinstance;","highlight_start":5,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":299,"byte_end":354,"line_start":11,"line_end":11,"column_start":1,"column_end":56,"is_primary":true,"text":[{"text":"use crate::numbers::instances::RR_instance::RRinstance;","highlight_start":1,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::instances::RR_instance::RRinstance`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::instances::RR_instance::RRinstance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::instances::ZZ_instance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":359,"byte_end":397,"line_start":12,"line_end":12,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"use crate::numbers::instances::ZZ_instance;","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":355,"byte_end":398,"line_start":12,"line_end":12,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"use crate::numbers::instances::ZZ_instance;","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::instances::ZZ_instance`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::instances::ZZ_instance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::utilities`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":736,"byte_end":752,"line_start":20,"line_end":20,"column_start":5,"column_end":21,"is_primary":true,"text":[{"text":"use crate::utilities;","highlight_start":5,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":732,"byte_end":753,"line_start":20,"line_end":20,"column_start":1,"column_end":22,"is_primary":true,"text":[{"text":"use crate::utilities;","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::utilities`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:20:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::utilities;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::utilities::utils::poly_divmod`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":758,"byte_end":794,"line_start":21,"line_end":21,"column_start":5,"column_end":41,"is_primary":true,"text":[{"text":"use crate::utilities::utils::poly_divmod;","highlight_start":5,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":754,"byte_end":795,"line_start":21,"line_end":21,"column_start":1,"column_end":42,"is_primary":true,"text":[{"text":"use crate::utilities::utils::poly_divmod;","highlight_start":1,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::utilities::utils::poly_divmod`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:21:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::utilities::utils::poly_divmod;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `RandomBits`, `ToBigInt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":304,"byte_end":314,"line_start":4,"line_end":4,"column_start":26,"column_end":36,"is_primary":true,"text":[{"text":"use num_bigint::{BigInt, RandomBits, ToBigInt};","highlight_start":26,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/numbers/numbers.rs","byte_start":316,"byte_end":324,"line_start":4,"line_end":4,"column_start":38,"column_end":46,"is_primary":true,"text":[{"text":"use num_bigint::{BigInt, RandomBits, ToBigInt};","highlight_start":38,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":302,"byte_end":324,"line_start":4,"line_end":4,"column_start":24,"column_end":46,"is_primary":true,"text":[{"text":"use num_bigint::{BigInt, RandomBits, ToBigInt};","highlight_start":24,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `RandomBits`, `ToBigInt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/numbers/numbers.rs:4:26\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_bigint::{BigInt, RandomBits, ToBigInt};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_traits::ToPrimitive`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":384,"byte_end":407,"line_start":7,"line_end":7,"column_start":5,"column_end":28,"is_primary":true,"text":[{"text":"use num_traits::ToPrimitive;","highlight_start":5,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":380,"byte_end":408,"line_start":7,"line_end":7,"column_start":1,"column_end":29,"is_primary":true,"text":[{"text":"use num_traits::ToPrimitive;","highlight_start":1,"highlight_end":29}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_traits::ToPrimitive`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/numbers/numbers.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_traits::ToPrimitive;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::cell::RefCell`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":476,"byte_end":494,"line_start":11,"line_end":11,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use std::cell::RefCell;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":472,"byte_end":495,"line_start":11,"line_end":11,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use std::cell::RefCell;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::cell::RefCell`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/numbers/numbers.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::cell::RefCell;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::poly::classes::monomial::Monomial`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":523,"byte_end":563,"line_start":13,"line_end":13,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"use crate::poly::classes::monomial::Monomial;","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":519,"byte_end":564,"line_start":13,"line_end":13,"column_start":1,"column_end":46,"is_primary":true,"text":[{"text":"use crate::poly::classes::monomial::Monomial;","highlight_start":1,"highlight_end":46}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::poly::classes::monomial::Monomial`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/numbers/numbers.rs:13:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m13\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::poly::classes::monomial::Monomial;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `classes::ZZ::ZZ`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":614,"byte_end":629,"line_start":15,"line_end":15,"column_start":49,"column_end":64,"is_primary":true,"text":[{"text":"use super::{instances::ZZ_instance::ZZinstance, classes::ZZ::ZZ};","highlight_start":49,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/numbers/numbers.rs","byte_start":612,"byte_end":629,"line_start":15,"line_end":15,"column_start":47,"column_end":64,"is_primary":true,"text":[{"text":"use super::{instances::ZZ_instance::ZZinstance, classes::ZZ::ZZ};","highlight_start":47,"highlight_end":64}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `classes::ZZ::ZZ`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/numbers/numbers.rs:15:49\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::{instances::ZZ_instance::ZZinstance, classes::ZZ::ZZ};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::poly`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/numbers/classes/QQ.rs","byte_start":784,"byte_end":795,"line_start":17,"line_end":17,"column_start":5,"column_end":16,"is_primary":true,"text":[{"text":"use crate::poly;","highlight_start":5,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/numbers/classes/QQ.rs","byte_start":780,"byte_end":796,"line_start":17,"line_end":17,"column_start":1,"column_end":17,"is_primary":true,"text":[{"text":"use crate::poly;","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::poly`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/numbers/classes/QQ.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::poly;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::instances::ZZ_instance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/numbers/classes/ZZ.rs","byte_start":333,"byte_end":371,"line_start":7,"line_end":7,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"use crate::numbers::instances::ZZ_instance;","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/numbers/classes/ZZ.rs","byte_start":329,"byte_end":372,"line_start":7,"line_end":7,"column_start":1,"column_end":44,"is_primary":true,"text":[{"text":"use crate::numbers::instances::ZZ_instance;","highlight_start":1,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::instances::ZZ_instance`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/numbers/classes/ZZ.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::instances::ZZ_instance;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_integer::Integer`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/numbers/instances/ZZ_instance.rs","byte_start":74,"byte_end":94,"line_start":3,"line_end":3,"column_start":5,"column_end":25,"is_primary":true,"text":[{"text":"use num_integer::Integer;","highlight_start":5,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/numbers/instances/ZZ_instance.rs","byte_start":70,"byte_end":95,"line_start":3,"line_end":3,"column_start":1,"column_end":26,"is_primary":true,"text":[{"text":"use num_integer::Integer;","highlight_start":1,"highlight_end":26}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_integer::Integer`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/numbers/instances/ZZ_instance.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_integer::Integer;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_bigint::BigInt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/matrices/matrix.rs","byte_start":93,"byte_end":111,"line_start":6,"line_end":6,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/matrices/matrix.rs","byte_start":89,"byte_end":112,"line_start":6,"line_end":6,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use num_bigint::BigInt;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_bigint::BigInt`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/matrices/matrix.rs:6:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_bigint::BigInt;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `Class`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/matrices/matrix.rs","byte_start":300,"byte_end":305,"line_start":9,"line_end":9,"column_start":31,"column_end":36,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::{Class, ClassInstance, Instance, Number, Operand, StatefulClass};","highlight_start":31,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/matrices/matrix.rs","byte_start":300,"byte_end":307,"line_start":9,"line_end":9,"column_start":31,"column_end":38,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::{Class, ClassInstance, Instance, Number, Operand, StatefulClass};","highlight_start":31,"highlight_end":38}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Class`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/matrices/matrix.rs:9:31\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::{Class, ClassInstance, Instance, Number, Operand, StatefulClass};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::sets::Class::ClassTypes`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/matrices/matrix.rs","byte_start":406,"byte_end":445,"line_start":11,"line_end":11,"column_start":5,"column_end":44,"is_primary":true,"text":[{"text":"use crate::numbers::sets::Class::ClassTypes;","highlight_start":5,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/matrices/matrix.rs","byte_start":402,"byte_end":446,"line_start":11,"line_end":11,"column_start":1,"column_end":45,"is_primary":true,"text":[{"text":"use crate::numbers::sets::Class::ClassTypes;","highlight_start":1,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::sets::Class::ClassTypes`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/matrices/matrix.rs:11:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m11\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::sets::Class::ClassTypes;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::algebras::FiniteField::instances::Zmod_instance::ZmodInstance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/utilities/utils.rs","byte_start":166,"byte_end":234,"line_start":8,"line_end":8,"column_start":5,"column_end":73,"is_primary":true,"text":[{"text":"use crate::algebras::FiniteField::instances::Zmod_instance::ZmodInstance;","highlight_start":5,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/utilities/utils.rs","byte_start":162,"byte_end":235,"line_start":8,"line_end":8,"column_start":1,"column_end":74,"is_primary":true,"text":[{"text":"use crate::algebras::FiniteField::instances::Zmod_instance::ZmodInstance;","highlight_start":1,"highlight_end":74}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::algebras::FiniteField::instances::Zmod_instance::ZmodInstance`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/utilities/utils.rs:8:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::algebras::FiniteField::instances::Zmod_instance::ZmodInstance;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_traits::Num`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/Rings/classes/PolynomialRing.rs","byte_start":51,"byte_end":66,"line_start":3,"line_end":3,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use num_traits::Num;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/algebras/Rings/classes/PolynomialRing.rs","byte_start":47,"byte_end":67,"line_start":3,"line_end":3,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"use num_traits::Num;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_traits::Num`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/Rings/classes/PolynomialRing.rs:3:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_traits::Num;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::transform::ntt`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/Rings/classes/PolynomialRing.rs","byte_start":604,"byte_end":625,"line_start":16,"line_end":16,"column_start":5,"column_end":26,"is_primary":true,"text":[{"text":"use crate::transform::ntt;","highlight_start":5,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/algebras/Rings/classes/PolynomialRing.rs","byte_start":600,"byte_end":626,"line_start":16,"line_end":16,"column_start":1,"column_end":27,"is_primary":true,"text":[{"text":"use crate::transform::ntt;","highlight_start":1,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::transform::ntt`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/Rings/classes/PolynomialRing.rs:16:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::transform::ntt;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_traits::Num`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/Rings/instances/PolynomialRing_instance.rs","byte_start":28,"byte_end":43,"line_start":2,"line_end":2,"column_start":5,"column_end":20,"is_primary":true,"text":[{"text":"use num_traits::Num;","highlight_start":5,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/algebras/Rings/instances/PolynomialRing_instance.rs","byte_start":24,"byte_end":44,"line_start":2,"line_end":2,"column_start":1,"column_end":21,"is_primary":true,"text":[{"text":"use num_traits::Num;","highlight_start":1,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_traits::Num`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/Rings/instances/PolynomialRing_instance.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_traits::Num;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `std::any::Any`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/Rings/instances/PolynomialRing_instance.rs","byte_start":615,"byte_end":628,"line_start":14,"line_end":14,"column_start":5,"column_end":18,"is_primary":true,"text":[{"text":"use std::any::Any;","highlight_start":5,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/algebras/Rings/instances/PolynomialRing_instance.rs","byte_start":611,"byte_end":629,"line_start":14,"line_end":14,"column_start":1,"column_end":19,"is_primary":true,"text":[{"text":"use std::any::Any;","highlight_start":1,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::any::Any`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/Rings/instances/PolynomialRing_instance.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::any::Any;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `sets::Class::ClassTypes`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/Groups/EllipticCurves/elliptic_curve_factory.rs","byte_start":66,"byte_end":89,"line_start":1,"line_end":1,"column_start":67,"column_end":90,"is_primary":true,"text":[{"text":"use crate::numbers::{numbers::{ClassInstance, Instance, Operand}, sets::Class::ClassTypes};","highlight_start":67,"highlight_end":90}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/algebras/Groups/EllipticCurves/elliptic_curve_factory.rs","byte_start":64,"byte_end":89,"line_start":1,"line_end":1,"column_start":65,"column_end":90,"is_primary":true,"text":[{"text":"use crate::numbers::{numbers::{ClassInstance, Instance, Operand}, sets::Class::ClassTypes};","highlight_start":65,"highlight_end":90}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `sets::Class::ClassTypes`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/Groups/EllipticCurves/elliptic_curve_factory.rs:1:67\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::{numbers::{ClassInstance, Instance, Operand}, sets::Class::ClassTypes};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"type `EllipticCurve_generic` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/Groups/EllipticCurves/elliptic_curve_generic.rs","byte_start":189,"byte_end":210,"line_start":8,"line_end":8,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"pub struct EllipticCurve_generic<T> {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_camel_case_types)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/algebras/Groups/EllipticCurves/elliptic_curve_generic.rs","byte_start":189,"byte_end":210,"line_start":8,"line_end":8,"column_start":12,"column_end":33,"is_primary":true,"text":[{"text":"pub struct EllipticCurve_generic<T> {","highlight_start":12,"highlight_end":33}],"label":null,"suggested_replacement":"EllipticCurveGeneric","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `EllipticCurve_generic` should have an upper camel case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/Groups/EllipticCurves/elliptic_curve_generic.rs:8:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct EllipticCurve_generic<T> {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `EllipticCurveGeneric`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_camel_case_types)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `std::fmt::Display`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":4,"byte_end":21,"line_start":1,"line_end":1,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use std::fmt::Display;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":0,"byte_end":22,"line_start":1,"line_end":1,"column_start":1,"column_end":23,"is_primary":true,"text":[{"text":"use std::fmt::Display;","highlight_start":1,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::fmt::Display`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::fmt::Display;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `num_prime::BitTest`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":52,"byte_end":70,"line_start":4,"line_end":4,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"use num_prime::BitTest;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":48,"byte_end":71,"line_start":4,"line_end":4,"column_start":1,"column_end":24,"is_primary":true,"text":[{"text":"use num_prime::BitTest;","highlight_start":1,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `num_prime::BitTest`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_prime::BitTest;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `pow`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":89,"byte_end":92,"line_start":5,"line_end":5,"column_start":18,"column_end":21,"is_primary":true,"text":[{"text":"use num_traits::{pow, Pow, Signed, ToPrimitive};","highlight_start":18,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":89,"byte_end":94,"line_start":5,"line_end":5,"column_start":18,"column_end":23,"is_primary":true,"text":[{"text":"use num_traits::{pow, Pow, Signed, ToPrimitive};","highlight_start":18,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `pow`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:5:18\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_traits::{pow, Pow, Signed, ToPrimitive};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\n\n"}
{"message":"unused import: `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":236,"byte_end":240,"line_start":6,"line_end":6,"column_start":116,"column_end":120,"is_primary":true,"text":[{"text":"use crate::{algebras::FiniteField::{classes::Zmod::Zmod, instances::Zmod_instance::ZmodInstance}, arith::{primes::{self, is_prime}, random::{get_random_bigint, get_random_bigint_with_bounds}}, numbers::{classes::ZZ::ZZ, numbers::{Class, Instance, Operand}}};","highlight_start":116,"highlight_end":120}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":236,"byte_end":242,"line_start":6,"line_end":6,"column_start":116,"column_end":122,"is_primary":true,"text":[{"text":"use crate::{algebras::FiniteField::{classes::Zmod::Zmod, instances::Zmod_instance::ZmodInstance}, arith::{primes::{self, is_prime}, random::{get_random_bigint, get_random_bigint_with_bounds}}, numbers::{classes::ZZ::ZZ, numbers::{Class, Instance, Operand}}};","highlight_start":116,"highlight_end":122}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:6:116\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::{algebras::FiniteField::{classes::Zmod::Zmod, instances::Zmod_instance::ZmodInstance}, arith::{primes::{self, is_prime}, random::{get_random_bigint, get_random_bigint_with_bounds}},\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"type `NTT_Algorithm` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":407,"byte_end":420,"line_start":9,"line_end":9,"column_start":10,"column_end":23,"is_primary":true,"text":[{"text":"pub enum NTT_Algorithm {","highlight_start":10,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":407,"byte_end":420,"line_start":9,"line_end":9,"column_start":10,"column_end":23,"is_primary":true,"text":[{"text":"pub enum NTT_Algorithm {","highlight_start":10,"highlight_end":23}],"label":null,"suggested_replacement":"NttAlgorithm","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `NTT_Algorithm` should have an upper camel case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:9:10\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub enum NTT_Algorithm {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `NttAlgorithm`\u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":10705,"byte_end":10706,"line_start":335,"line_end":335,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"            let v = (prec);","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/transform/ntt.rs","byte_start":10710,"byte_end":10711,"line_start":335,"line_end":335,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"            let v = (prec);","highlight_start":26,"highlight_end":27}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_parens)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":10705,"byte_end":10706,"line_start":335,"line_end":335,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"            let v = (prec);","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/transform/ntt.rs","byte_start":10710,"byte_end":10711,"line_start":335,"line_end":335,"column_start":26,"column_end":27,"is_primary":true,"text":[{"text":"            let v = (prec);","highlight_start":26,"highlight_end":27}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:335:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let v = (prec);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_parens)]` on by default\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let v = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mprec\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m335\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let v = prec;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around function argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/arith/random.rs","byte_start":2500,"byte_end":2501,"line_start":53,"line_end":53,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"        coefficients.push(field.apply(T::random_with_bounds(-bound.clone()/2, (bound.clone()/2+1))));","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/arith/random.rs","byte_start":2518,"byte_end":2519,"line_start":53,"line_end":53,"column_start":97,"column_end":98,"is_primary":true,"text":[{"text":"        coefficients.push(field.apply(T::random_with_bounds(-bound.clone()/2, (bound.clone()/2+1))));","highlight_start":97,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/arith/random.rs","byte_start":2500,"byte_end":2501,"line_start":53,"line_end":53,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"        coefficients.push(field.apply(T::random_with_bounds(-bound.clone()/2, (bound.clone()/2+1))));","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/arith/random.rs","byte_start":2518,"byte_end":2519,"line_start":53,"line_end":53,"column_start":97,"column_end":98,"is_primary":true,"text":[{"text":"        coefficients.push(field.apply(T::random_with_bounds(-bound.clone()/2, (bound.clone()/2+1))));","highlight_start":97,"highlight_end":98}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around function argument\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/arith/random.rs:53:79\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        coefficients.push(field.apply(T::random_with_bounds(-bound.clone()/2, (bound.clone()/2+1))));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        coefficients.push(field.apply(T::random_with_bounds(-bound.clone()/2, \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mbound.clone()/2+1\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m)));\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        coefficients.push(field.apply(T::random_with_bounds(-bound.clone()/2, bound.clone()/2+1)));\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"trait `LatticeBased_PKIinterface` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/interfaces/interfaces.rs","byte_start":352,"byte_end":377,"line_start":9,"line_end":9,"column_start":11,"column_end":36,"is_primary":true,"text":[{"text":"pub trait LatticeBased_PKIinterface {","highlight_start":11,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/interfaces/interfaces.rs","byte_start":352,"byte_end":377,"line_start":9,"line_end":9,"column_start":11,"column_end":36,"is_primary":true,"text":[{"text":"pub trait LatticeBased_PKIinterface {","highlight_start":11,"highlight_end":36}],"label":null,"suggested_replacement":"LatticeBasedPkiinterface","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `LatticeBased_PKIinterface` should have an upper camel case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/interfaces/interfaces.rs:9:11\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait LatticeBased_PKIinterface {\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `LatticeBasedPkiinterface`\u001b[0m\n\n"}
{"message":"unused import: `bigdecimal::BigDecimalRef`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":4,"byte_end":29,"line_start":1,"line_end":1,"column_start":5,"column_end":30,"is_primary":true,"text":[{"text":"use bigdecimal::BigDecimalRef;","highlight_start":5,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":0,"byte_end":30,"line_start":1,"line_end":1,"column_start":1,"column_end":31,"is_primary":true,"text":[{"text":"use bigdecimal::BigDecimalRef;","highlight_start":1,"highlight_end":31}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `bigdecimal::BigDecimalRef`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/rsa.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse bigdecimal::BigDecimalRef;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":321,"byte_end":325,"line_start":7,"line_end":7,"column_start":151,"column_end":155,"is_primary":true,"text":[{"text":"use crate::{cryptography::asymmetric::interfaces::interfaces::{PKIinterface}, algebras::FiniteField::{classes::Zmod::Zmod, instances::Zmod_instance::{self, ZmodInstance}}, numbers::numbers::Class, arith::primes::get_strong_prime};","highlight_start":151,"highlight_end":155}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":321,"byte_end":327,"line_start":7,"line_end":7,"column_start":151,"column_end":157,"is_primary":true,"text":[{"text":"use crate::{cryptography::asymmetric::interfaces::interfaces::{PKIinterface}, algebras::FiniteField::{classes::Zmod::Zmod, instances::Zmod_instance::{self, ZmodInstance}}, numbers::numbers::Class, arith::primes::get_strong_prime};","highlight_start":151,"highlight_end":157}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/rsa.rs:7:151\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::{cryptography::asymmetric::interfaces::interfaces::{PKIinterface}, algebras::FiniteField::{classes::Zmod::Zmod, instances::Zmod_instance::{self, ZmodInstance}}, numbers::numbers::Cl\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"unused import: `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":664,"byte_end":668,"line_start":6,"line_end":6,"column_start":536,"column_end":540,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::PolynomialRingInstance, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, random_byte_array}, cryptography::asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm}, variables::vars::Var};","highlight_start":536,"highlight_end":540}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":662,"byte_end":668,"line_start":6,"line_end":6,"column_start":534,"column_end":540,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::PolynomialRingInstance, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, random_byte_array}, cryptography::asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm}, variables::vars::Var};","highlight_start":534,"highlight_end":540}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:6:536\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m:{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instan\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":7223,"byte_end":7241,"line_start":162,"line_end":163,"column_start":24,"column_end":17,"is_primary":true,"text":[{"text":"            error.push((","highlight_start":24,"highlight_end":25},{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":7386,"byte_end":7387,"line_start":163,"line_end":163,"column_start":162,"column_end":163,"is_primary":true,"text":[{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":162,"highlight_end":163}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":7223,"byte_end":7241,"line_start":162,"line_end":163,"column_start":24,"column_end":17,"is_primary":true,"text":[{"text":"            error.push((","highlight_start":24,"highlight_end":25},{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":7386,"byte_end":7387,"line_start":163,"line_end":163,"column_start":162,"column_end":163,"is_primary":true,"text":[{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":162,"highlight_end":163}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:162:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            error.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________^\u001b[0m\u001b[0m                                                                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            error.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m163\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            error.push(ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":8710,"byte_end":8728,"line_start":194,"line_end":195,"column_start":32,"column_end":17,"is_primary":true,"text":[{"text":"            random_vector.push((","highlight_start":32,"highlight_end":33},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":8927,"byte_end":8928,"line_start":195,"line_end":195,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":8710,"byte_end":8728,"line_start":194,"line_end":195,"column_start":32,"column_end":17,"is_primary":true,"text":[{"text":"            random_vector.push((","highlight_start":32,"highlight_end":33},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":8927,"byte_end":8928,"line_start":195,"line_end":195,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:194:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mrandom_vector.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\u001b[0m                                                                                                                                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            random_vector.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m194\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            random_vector.push(self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9168,"byte_end":9186,"line_start":201,"line_end":202,"column_start":26,"column_end":17,"is_primary":true,"text":[{"text":"            error_1.push((","highlight_start":26,"highlight_end":27},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9385,"byte_end":9386,"line_start":202,"line_end":202,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9168,"byte_end":9186,"line_start":201,"line_end":202,"column_start":26,"column_end":17,"is_primary":true,"text":[{"text":"            error_1.push((","highlight_start":26,"highlight_end":27},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9385,"byte_end":9386,"line_start":202,"line_end":202,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:201:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0merror_1.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\u001b[0m                                                                                                                                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            error_1.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            error_1.push(self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9587,"byte_end":9601,"line_start":207,"line_end":208,"column_start":22,"column_end":13,"is_primary":true,"text":[{"text":"        error_2.push((","highlight_start":22,"highlight_end":23},{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9800,"byte_end":9801,"line_start":208,"line_end":208,"column_start":212,"column_end":213,"is_primary":true,"text":[{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":212,"highlight_end":213}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9587,"byte_end":9601,"line_start":207,"line_end":208,"column_start":22,"column_end":13,"is_primary":true,"text":[{"text":"        error_2.push((","highlight_start":22,"highlight_end":23},{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9800,"byte_end":9801,"line_start":208,"line_end":208,"column_start":212,"column_end":213,"is_primary":true,"text":[{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":212,"highlight_end":213}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:207:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0merror_2.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\u001b[0m                                                                                                                                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        error_2.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m); \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        error_2.push(self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))); \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":14822,"byte_end":14840,"line_start":318,"line_end":319,"column_start":24,"column_end":17,"is_primary":true,"text":[{"text":"            error.push((","highlight_start":24,"highlight_end":25},{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":14985,"byte_end":14986,"line_start":319,"line_end":319,"column_start":162,"column_end":163,"is_primary":true,"text":[{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":162,"highlight_end":163}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":14822,"byte_end":14840,"line_start":318,"line_end":319,"column_start":24,"column_end":17,"is_primary":true,"text":[{"text":"            error.push((","highlight_start":24,"highlight_end":25},{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":14985,"byte_end":14986,"line_start":319,"line_end":319,"column_start":162,"column_end":163,"is_primary":true,"text":[{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":162,"highlight_end":163}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:318:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            error.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________^\u001b[0m\u001b[0m                                                                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            error.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m318\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            error.push(ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":16309,"byte_end":16327,"line_start":350,"line_end":351,"column_start":32,"column_end":17,"is_primary":true,"text":[{"text":"            random_vector.push((","highlight_start":32,"highlight_end":33},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":16526,"byte_end":16527,"line_start":351,"line_end":351,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":16309,"byte_end":16327,"line_start":350,"line_end":351,"column_start":32,"column_end":17,"is_primary":true,"text":[{"text":"            random_vector.push((","highlight_start":32,"highlight_end":33},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":16526,"byte_end":16527,"line_start":351,"line_end":351,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:350:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mrandom_vector.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\u001b[0m                                                                                                                                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            random_vector.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m351\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            random_vector.push(self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":16767,"byte_end":16785,"line_start":357,"line_end":358,"column_start":26,"column_end":17,"is_primary":true,"text":[{"text":"            error_1.push((","highlight_start":26,"highlight_end":27},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":16984,"byte_end":16985,"line_start":358,"line_end":358,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":16767,"byte_end":16785,"line_start":357,"line_end":358,"column_start":26,"column_end":17,"is_primary":true,"text":[{"text":"            error_1.push((","highlight_start":26,"highlight_end":27},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":16984,"byte_end":16985,"line_start":358,"line_end":358,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:357:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m357\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0merror_1.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m358\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\u001b[0m                                                                                                                                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m357\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            error_1.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m358\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m357\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            error_1.push(self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":17186,"byte_end":17200,"line_start":363,"line_end":364,"column_start":22,"column_end":13,"is_primary":true,"text":[{"text":"        error_2.push((","highlight_start":22,"highlight_end":23},{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":17399,"byte_end":17400,"line_start":364,"line_end":364,"column_start":212,"column_end":213,"is_primary":true,"text":[{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":212,"highlight_end":213}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":17186,"byte_end":17200,"line_start":363,"line_end":364,"column_start":22,"column_end":13,"is_primary":true,"text":[{"text":"        error_2.push((","highlight_start":22,"highlight_end":23},{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":17399,"byte_end":17400,"line_start":364,"line_end":364,"column_start":212,"column_end":213,"is_primary":true,"text":[{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":212,"highlight_end":213}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:363:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0merror_2.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\u001b[0m                                                                                                                                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        error_2.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m364\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m); \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m363\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        error_2.push(self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))); \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":22421,"byte_end":22439,"line_start":473,"line_end":474,"column_start":24,"column_end":17,"is_primary":true,"text":[{"text":"            error.push((","highlight_start":24,"highlight_end":25},{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":22584,"byte_end":22585,"line_start":474,"line_end":474,"column_start":162,"column_end":163,"is_primary":true,"text":[{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":162,"highlight_end":163}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":22421,"byte_end":22439,"line_start":473,"line_end":474,"column_start":24,"column_end":17,"is_primary":true,"text":[{"text":"            error.push((","highlight_start":24,"highlight_end":25},{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":22584,"byte_end":22585,"line_start":474,"line_end":474,"column_start":162,"column_end":163,"is_primary":true,"text":[{"text":"                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));","highlight_start":162,"highlight_end":163}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:473:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            error.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m474\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|________________^\u001b[0m\u001b[0m                                                                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            error.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m474\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m473\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            error.push(ntt_ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(n, eta_1) % q.clone()).quotient(irreducible_polynomial.clone(), true, false))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":23909,"byte_end":23927,"line_start":504,"line_end":505,"column_start":32,"column_end":17,"is_primary":true,"text":[{"text":"            random_vector.push((","highlight_start":32,"highlight_end":33},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24126,"byte_end":24127,"line_start":505,"line_end":505,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":23909,"byte_end":23927,"line_start":504,"line_end":505,"column_start":32,"column_end":17,"is_primary":true,"text":[{"text":"            random_vector.push((","highlight_start":32,"highlight_end":33},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24126,"byte_end":24127,"line_start":505,"line_end":505,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:504:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mrandom_vector.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_______________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\u001b[0m                                                                                                                                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            random_vector.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m505\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m504\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            random_vector.push(self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta1) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24367,"byte_end":24385,"line_start":511,"line_end":512,"column_start":26,"column_end":17,"is_primary":true,"text":[{"text":"            error_1.push((","highlight_start":26,"highlight_end":27},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24584,"byte_end":24585,"line_start":512,"line_end":512,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24367,"byte_end":24385,"line_start":511,"line_end":512,"column_start":26,"column_end":17,"is_primary":true,"text":[{"text":"            error_1.push((","highlight_start":26,"highlight_end":27},{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24584,"byte_end":24585,"line_start":512,"line_end":512,"column_start":216,"column_end":217,"is_primary":true,"text":[{"text":"                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))));","highlight_start":216,"highlight_end":217}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:511:26\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0merror_1.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\u001b[0m                                                                                                                                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            error_1.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m512\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m                self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m511\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            error_1.push(self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around method argument","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24786,"byte_end":24800,"line_start":517,"line_end":518,"column_start":22,"column_end":13,"is_primary":true,"text":[{"text":"        error_2.push((","highlight_start":22,"highlight_end":23},{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24999,"byte_end":25000,"line_start":518,"line_end":518,"column_start":212,"column_end":213,"is_primary":true,"text":[{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":212,"highlight_end":213}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24786,"byte_end":24800,"line_start":517,"line_end":518,"column_start":22,"column_end":13,"is_primary":true,"text":[{"text":"        error_2.push((","highlight_start":22,"highlight_end":23},{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":1,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":24999,"byte_end":25000,"line_start":518,"line_end":518,"column_start":212,"column_end":213,"is_primary":true,"text":[{"text":"            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))); ","highlight_start":212,"highlight_end":213}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around method argument\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:517:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0merror_2.push((\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m_________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))))\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[33m|_______^\u001b[0m\u001b[0m                                                                                                                                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        error_2.push((\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m518\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m); \u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m517\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        error_2.push(self.ring.apply_ntt_ctxt(&((gen_from_centered_binomial_distribution(self.n, self.eta2) % self.field.module.as_ref().unwrap().clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false)))); \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unused imports: `matrices::vector::Vector`, `numbers::instances::ZZ_instance::ZZinstance`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":169,"byte_end":193,"line_start":3,"line_end":3,"column_start":145,"column_end":169,"is_primary":true,"text":[{"text":"use crate::{algebras::{FiniteField::instances::Zmod_instance::ZmodInstance, Rings::instances::PolynomialRing_instance::PolynomialRingInstance}, matrices::vector::Vector, numbers::instances::ZZ_instance::ZZinstance};","highlight_start":145,"highlight_end":169}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":195,"byte_end":238,"line_start":3,"line_end":3,"column_start":171,"column_end":214,"is_primary":true,"text":[{"text":"use crate::{algebras::{FiniteField::instances::Zmod_instance::ZmodInstance, Rings::instances::PolynomialRing_instance::PolynomialRingInstance}, matrices::vector::Vector, numbers::instances::ZZ_instance::ZZinstance};","highlight_start":171,"highlight_end":214}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":167,"byte_end":238,"line_start":3,"line_end":3,"column_start":143,"column_end":214,"is_primary":true,"text":[{"text":"use crate::{algebras::{FiniteField::instances::Zmod_instance::ZmodInstance, Rings::instances::PolynomialRing_instance::PolynomialRingInstance}, matrices::vector::Vector, numbers::instances::ZZ_instance::ZZinstance};","highlight_start":143,"highlight_end":214}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `matrices::vector::Vector`, `numbers::instances::ZZ_instance::ZZinstance`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/interfaces/interfaces.rs:3:145\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mnstances::PolynomialRing_instance::PolynomialRingInstance}, matrices::vector::Vector, numbers::instances::ZZ_instance::ZZinstance};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"trait `BFV_PKI` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":390,"byte_end":397,"line_start":10,"line_end":10,"column_start":11,"column_end":18,"is_primary":true,"text":[{"text":"pub trait BFV_PKI {","highlight_start":11,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":390,"byte_end":397,"line_start":10,"line_end":10,"column_start":11,"column_end":18,"is_primary":true,"text":[{"text":"pub trait BFV_PKI {","highlight_start":11,"highlight_end":18}],"label":null,"suggested_replacement":"BfvPki","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: trait `BFV_PKI` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/interfaces/interfaces.rs:10:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait BFV_PKI {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `BfvPki`\u001b[0m\n\n"}
{"message":"unused import: `rc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":39,"byte_end":41,"line_start":1,"line_end":1,"column_start":40,"column_end":42,"is_primary":true,"text":[{"text":"use std::{cell::RefCell, fmt::Display, rc};","highlight_start":40,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":37,"byte_end":41,"line_start":1,"line_end":1,"column_start":38,"column_end":42,"is_primary":true,"text":[{"text":"use std::{cell::RefCell, fmt::Display, rc};","highlight_start":38,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `rc`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:1:40\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::{cell::RefCell, fmt::Display, rc};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\n"}
{"message":"unused imports: `BigUint`, `ToBigUint`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":98,"byte_end":105,"line_start":4,"line_end":4,"column_start":26,"column_end":33,"is_primary":true,"text":[{"text":"use num_bigint::{BigInt, BigUint, ToBigUint};","highlight_start":26,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":107,"byte_end":116,"line_start":4,"line_end":4,"column_start":35,"column_end":44,"is_primary":true,"text":[{"text":"use num_bigint::{BigInt, BigUint, ToBigUint};","highlight_start":35,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":96,"byte_end":116,"line_start":4,"line_end":4,"column_start":24,"column_end":44,"is_primary":true,"text":[{"text":"use num_bigint::{BigInt, BigUint, ToBigUint};","highlight_start":24,"highlight_end":44}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `BigUint`, `ToBigUint`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:4:26\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse num_bigint::{BigInt, BigUint, ToBigUint};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused imports: `KEMinterface`, `LatticeBased_PKIinterface`, `PKIinterface`, `matrix::Matrix`, `random_byte_array`, `self`, `self`, `vector::Vector`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":223,"byte_end":227,"line_start":6,"line_end":6,"column_start":69,"column_end":73,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":69,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":460,"byte_end":477,"line_start":6,"line_end":6,"column_start":306,"column_end":323,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":306,"highlight_end":323}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":532,"byte_end":544,"line_start":6,"line_end":6,"column_start":378,"column_end":390,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":378,"highlight_end":390}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":546,"byte_end":558,"line_start":6,"line_end":6,"column_start":392,"column_end":404,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":392,"highlight_end":404}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":560,"byte_end":585,"line_start":6,"line_end":6,"column_start":406,"column_end":431,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":406,"highlight_end":431}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":654,"byte_end":668,"line_start":6,"line_end":6,"column_start":500,"column_end":514,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":500,"highlight_end":514}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":670,"byte_end":684,"line_start":6,"line_end":6,"column_start":516,"column_end":530,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":516,"highlight_end":530}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":797,"byte_end":801,"line_start":6,"line_end":6,"column_start":643,"column_end":647,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":643,"highlight_end":647}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":223,"byte_end":229,"line_start":6,"line_end":6,"column_start":69,"column_end":75,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":69,"highlight_end":75}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":458,"byte_end":477,"line_start":6,"line_end":6,"column_start":304,"column_end":323,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":304,"highlight_end":323}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":495,"byte_end":588,"line_start":6,"line_end":6,"column_start":341,"column_end":434,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":341,"highlight_end":434}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":641,"byte_end":685,"line_start":6,"line_end":6,"column_start":487,"column_end":531,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":487,"highlight_end":531}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":795,"byte_end":801,"line_start":6,"line_end":6,"column_start":641,"column_end":647,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm, NTT}, variables::vars::Var};","highlight_start":641,"highlight_end":647}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `KEMinterface`, `LatticeBased_PKIinterface`, `PKIinterface`, `matrix::Matrix`, `random_byte_array`, `self`, `self`, `vector::Vector`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:6:69\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m::{self, PolynomialRingInstance}, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, gen_from_uniform_distribution_with_modulo, random_byte_array}, cryptography::{asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, homomorphic::interfaces::interfaces::{ BFV_PKI, FHE}}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m                                                                                                                                                                                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m                                                                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::arith::random::gen_from_centered_binomial_distribution`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":1060,"byte_end":1121,"line_start":7,"line_end":7,"column_start":5,"column_end":66,"is_primary":true,"text":[{"text":"use crate::arith::random::gen_from_centered_binomial_distribution;","highlight_start":5,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":1056,"byte_end":1122,"line_start":7,"line_end":7,"column_start":1,"column_end":67,"is_primary":true,"text":[{"text":"use crate::arith::random::gen_from_centered_binomial_distribution;","highlight_start":1,"highlight_end":67}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::arith::random::gen_from_centered_binomial_distribution`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::arith::random::gen_from_centered_binomial_distribution;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unnecessary parentheses around `for` iterator expression","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":3156,"byte_end":3157,"line_start":51,"line_end":51,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"    for i in (0..poly.coefficients.len()) {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":3183,"byte_end":3184,"line_start":51,"line_end":51,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    for i in (0..poly.coefficients.len()) {","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":3156,"byte_end":3157,"line_start":51,"line_end":51,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"    for i in (0..poly.coefficients.len()) {","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":3183,"byte_end":3184,"line_start":51,"line_end":51,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"    for i in (0..poly.coefficients.len()) {","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around `for` iterator expression\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:51:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for i in (0..poly.coefficients.len()) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m    for i in \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0m0..poly.coefficients.len()\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m    for i in 0..poly.coefficients.len() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":13542,"byte_end":13543,"line_start":308,"line_end":308,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":13587,"byte_end":13588,"line_start":308,"line_end":308,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":13542,"byte_end":13543,"line_start":308,"line_end":308,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":13587,"byte_end":13588,"line_start":308,"line_end":308,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:308:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let tmp_ciphertext = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mnew_poly % ZZ::new().new_instance(p.clone())\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m308\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let tmp_ciphertext = new_poly % ZZ::new().new_instance(p.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":14464,"byte_end":14465,"line_start":325,"line_end":325,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":14509,"byte_end":14510,"line_start":325,"line_end":325,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":14464,"byte_end":14465,"line_start":325,"line_end":325,"column_start":34,"column_end":35,"is_primary":true,"text":[{"text":"            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));","highlight_start":34,"highlight_end":35}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":14509,"byte_end":14510,"line_start":325,"line_end":325,"column_start":79,"column_end":80,"is_primary":true,"text":[{"text":"            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));","highlight_start":79,"highlight_end":80}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:325:34\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let tmp_ciphertext = (new_poly % ZZ::new().new_instance(p.clone()));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m            let tmp_ciphertext = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0mnew_poly % ZZ::new().new_instance(p.clone())\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m325\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m            let tmp_ciphertext = new_poly % ZZ::new().new_instance(p.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unnecessary parentheses around assigned value","code":{"code":"unused_parens","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15511,"byte_end":15512,"line_start":347,"line_end":347,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        let M = ((plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false)));","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15592,"byte_end":15593,"line_start":347,"line_end":347,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"        let M = ((plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false)));","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove these parentheses","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15511,"byte_end":15512,"line_start":347,"line_end":347,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        let M = ((plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false)));","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15592,"byte_end":15593,"line_start":347,"line_end":347,"column_start":98,"column_end":99,"is_primary":true,"text":[{"text":"        let M = ((plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false)));","highlight_start":98,"highlight_end":99}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unnecessary parentheses around assigned value\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:347:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let M = ((plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false)));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: remove these parentheses\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;9m- \u001b[0m\u001b[0m        let M = \u001b[0m\u001b[0m\u001b[38;5;9m(\u001b[0m\u001b[0m(plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false))\u001b[0m\u001b[0m\u001b[38;5;9m)\u001b[0m\u001b[0m;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[38;5;10m+ \u001b[0m\u001b[0m        let M = (plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"unused imports: `aes_functions`, `self`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":156,"byte_end":169,"line_start":4,"line_end":4,"column_start":118,"column_end":131,"is_primary":true,"text":[{"text":"use crate::cryptography::{symmetric::{modes::modes::Modes, interfaces::interfaces::{AESinterface, AESfactory}, AES::{aes_functions, cipher::{encrypt, decrypt, self}}}, padding::padding::Paddings};","highlight_start":118,"highlight_end":131}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":198,"byte_end":202,"line_start":4,"line_end":4,"column_start":160,"column_end":164,"is_primary":true,"text":[{"text":"use crate::cryptography::{symmetric::{modes::modes::Modes, interfaces::interfaces::{AESinterface, AESfactory}, AES::{aes_functions, cipher::{encrypt, decrypt, self}}}, padding::padding::Paddings};","highlight_start":160,"highlight_end":164}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":156,"byte_end":171,"line_start":4,"line_end":4,"column_start":118,"column_end":133,"is_primary":true,"text":[{"text":"use crate::cryptography::{symmetric::{modes::modes::Modes, interfaces::interfaces::{AESinterface, AESfactory}, AES::{aes_functions, cipher::{encrypt, decrypt, self}}}, padding::padding::Paddings};","highlight_start":118,"highlight_end":133}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":196,"byte_end":202,"line_start":4,"line_end":4,"column_start":158,"column_end":164,"is_primary":true,"text":[{"text":"use crate::cryptography::{symmetric::{modes::modes::Modes, interfaces::interfaces::{AESinterface, AESfactory}, AES::{aes_functions, cipher::{encrypt, decrypt, self}}}, padding::padding::Paddings};","highlight_start":158,"highlight_end":164}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `aes_functions`, `self`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/symmetric/primitives/aes.rs:4:118\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::cryptography::{symmetric::{modes::modes::Modes, interfaces::interfaces::{AESinterface, AESfactory}, AES::{aes_functions, cipher::{encrypt, decrypt, self}}}, padding::padding::Paddin\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m                             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"message":"type `aes_factory` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":575,"byte_end":586,"line_start":26,"line_end":26,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"pub struct aes_factory {","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":575,"byte_end":586,"line_start":26,"line_end":26,"column_start":12,"column_end":23,"is_primary":true,"text":[{"text":"pub struct aes_factory {","highlight_start":12,"highlight_end":23}],"label":null,"suggested_replacement":"AesFactory","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `aes_factory` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/symmetric/primitives/aes.rs:26:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct aes_factory {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `AesFactory`\u001b[0m\n\n"}
{"message":"type `AES_CTR_with_preprocessing` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":2509,"byte_end":2535,"line_start":93,"line_end":93,"column_start":12,"column_end":38,"is_primary":true,"text":[{"text":"pub struct AES_CTR_with_preprocessing {","highlight_start":12,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":2509,"byte_end":2535,"line_start":93,"line_end":93,"column_start":12,"column_end":38,"is_primary":true,"text":[{"text":"pub struct AES_CTR_with_preprocessing {","highlight_start":12,"highlight_end":38}],"label":null,"suggested_replacement":"AesCtrWithPreprocessing","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `AES_CTR_with_preprocessing` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/symmetric/primitives/aes.rs:93:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct AES_CTR_with_preprocessing {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `AesCtrWithPreprocessing`\u001b[0m\n\n"}
{"message":"type `AES_CBC` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":5872,"byte_end":5879,"line_start":192,"line_end":192,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"pub struct AES_CBC {","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":5872,"byte_end":5879,"line_start":192,"line_end":192,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"pub struct AES_CBC {","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":"AesCbc","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `AES_CBC` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/symmetric/primitives/aes.rs:192:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m192\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct AES_CBC {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `AesCbc`\u001b[0m\n\n"}
{"message":"type `AES_ECB` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":8892,"byte_end":8899,"line_start":293,"line_end":293,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"pub struct AES_ECB {","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":8892,"byte_end":8899,"line_start":293,"line_end":293,"column_start":12,"column_end":19,"is_primary":true,"text":[{"text":"pub struct AES_ECB {","highlight_start":12,"highlight_end":19}],"label":null,"suggested_replacement":"AesEcb","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `AES_ECB` should have an upper camel case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/symmetric/primitives/aes.rs:293:12\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m293\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct AES_ECB {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `AesEcb`\u001b[0m\n\n"}
{"message":"variant `ANSI_X9_23` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":40,"byte_end":50,"line_start":4,"line_end":4,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    ANSI_X9_23,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":40,"byte_end":50,"line_start":4,"line_end":4,"column_start":5,"column_end":15,"is_primary":true,"text":[{"text":"    ANSI_X9_23,","highlight_start":5,"highlight_end":15}],"label":null,"suggested_replacement":"AnsiX9_23","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `ANSI_X9_23` should have an upper camel case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/padding/padding.rs:4:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ANSI_X9_23,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `AnsiX9_23`\u001b[0m\n\n"}
{"message":"variant `ISO_10126` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":56,"byte_end":65,"line_start":5,"line_end":5,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    ISO_10126,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":56,"byte_end":65,"line_start":5,"line_end":5,"column_start":5,"column_end":14,"is_primary":true,"text":[{"text":"    ISO_10126,","highlight_start":5,"highlight_end":14}],"label":null,"suggested_replacement":"Iso10126","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `ISO_10126` should have an upper camel case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/padding/padding.rs:5:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ISO_10126,\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `Iso10126`\u001b[0m\n\n"}
{"message":"variant `ISO_IEC_7816_4` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":82,"byte_end":96,"line_start":7,"line_end":7,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    ISO_IEC_7816_4","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":82,"byte_end":96,"line_start":7,"line_end":7,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"    ISO_IEC_7816_4","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":"IsoIec7816_4","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variant `ISO_IEC_7816_4` should have an upper camel case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/padding/padding.rs:7:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    ISO_IEC_7816_4\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `IsoIec7816_4`\u001b[0m\n\n"}
{"message":"type `ANSI_X9_23` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":272,"byte_end":282,"line_start":19,"line_end":19,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"pub struct ANSI_X9_23 {}","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":272,"byte_end":282,"line_start":19,"line_end":19,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"pub struct ANSI_X9_23 {}","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":"AnsiX9_23","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `ANSI_X9_23` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/padding/padding.rs:19:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ANSI_X9_23 {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `AnsiX9_23`\u001b[0m\n\n"}
{"message":"type `ISO_10126` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":1585,"byte_end":1594,"line_start":58,"line_end":58,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"pub struct ISO_10126 {}","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":1585,"byte_end":1594,"line_start":58,"line_end":58,"column_start":12,"column_end":21,"is_primary":true,"text":[{"text":"pub struct ISO_10126 {}","highlight_start":12,"highlight_end":21}],"label":null,"suggested_replacement":"Iso10126","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `ISO_10126` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/padding/padding.rs:58:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ISO_10126 {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `Iso10126`\u001b[0m\n\n"}
{"message":"type `ISO_IEC_7816_4` should have an upper camel case name","code":{"code":"non_camel_case_types","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":2453,"byte_end":2467,"line_start":87,"line_end":87,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"pub struct ISO_IEC_7816_4 {}","highlight_start":12,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to upper camel case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":2453,"byte_end":2467,"line_start":87,"line_end":87,"column_start":12,"column_end":26,"is_primary":true,"text":[{"text":"pub struct ISO_IEC_7816_4 {}","highlight_start":12,"highlight_end":26}],"label":null,"suggested_replacement":"IsoIec7816_4","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: type `ISO_IEC_7816_4` should have an upper camel case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/padding/padding.rs:87:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m87\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct ISO_IEC_7816_4 {}\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to upper camel case: `IsoIec7816_4`\u001b[0m\n\n"}
{"message":"unreachable statement","code":{"code":"unreachable_code","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":3506,"byte_end":3529,"line_start":118,"line_end":118,"column_start":9,"column_end":32,"is_primary":true,"text":[{"text":"        return BigInt::from(0);","highlight_start":9,"highlight_end":32}],"label":"unreachable statement","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/transform/ntt.rs","byte_start":3027,"byte_end":3496,"line_start":102,"line_end":116,"column_start":9,"column_end":10,"is_primary":false,"text":[{"text":"        loop {","highlight_start":9,"highlight_end":15},{"text":"            let zeta: BigInt = get_random_bigint_with_bounds(BigInt::from(0), q.clone()-1);","highlight_start":1,"highlight_end":92},{"text":"            let mut check: bool = true;","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            for i in 1..m {","highlight_start":1,"highlight_end":28},{"text":"                if zeta.modpow(&BigInt::from(i), &q) == BigInt::from(1)  {","highlight_start":1,"highlight_end":75},{"text":"                    check = false;","highlight_start":1,"highlight_end":35},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"","highlight_start":1,"highlight_end":1},{"text":"            if zeta.modpow(&BigInt::from(m), &q) == BigInt::from(1) && check {","highlight_start":1,"highlight_end":79},{"text":"                return zeta;","highlight_start":1,"highlight_end":29},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10}],"label":"any code following this expression is unreachable","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable statement\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:118:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m/\u001b[0m\u001b[0m \u001b[0m\u001b[0m        loop {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let zeta: BigInt = get_random_bigint_with_bounds(BigInt::from(0), q.clone()-1);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut check: bool = true;\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|_________-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12many code following this expression is unreachable\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m        return BigInt::from(0);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33munreachable statement\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_code)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::numbers::Class`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":459,"byte_end":489,"line_start":14,"line_end":14,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::Class;","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::numbers::Class`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:14:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::Class;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::numbers::StatefulClass`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":576,"byte_end":614,"line_start":17,"line_end":17,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::StatefulClass;","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::numbers::StatefulClass`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:17:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::StatefulClass;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `PKIinterface`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":454,"byte_end":466,"line_start":6,"line_end":6,"column_start":326,"column_end":338,"is_primary":true,"text":[{"text":"use crate::{algebras::{Rings::{instances::PolynomialRing_instance::PolynomialRingInstance, classes::PolynomialRing::PolynomialRing}, FiniteField::{instances::Zmod_instance::ZmodInstance, classes::Zmod::Zmod}}, arith::random::{gen_from_range_with_modulo, random_byte_array}, cryptography::asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, matrices::{matrix::Matrix, vector::Vector}, numbers::{numbers::{Class, Instance, Number, Operand, PrimitiveNumber}, instances::{ZZ_instance::{ZZinstance, self}, RR_instance::RRinstance}, classes::RR::RR}, poly::{instances::univariate_polynomial_instance::UnivariatePolynomialInstance, classes::univariate_polynomial::UnivariatePolynomial}, transform::ntt::{NTTFactory, NTT_Algorithm}, variables::vars::Var};","highlight_start":326,"highlight_end":338}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `PKIinterface`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:6:326\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mnge_with_modulo, random_byte_array}, cryptography::asymmetric::interfaces::interfaces::{PKIinterface, KEMinterface, LatticeBased_PKIinterface}, matrices::{matrix::Matrix, vector::Vector}, n\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::numbers::Class`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/utilities/utils.rs","byte_start":240,"byte_end":270,"line_start":9,"line_end":9,"column_start":5,"column_end":35,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::Class;","highlight_start":5,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::numbers::Class`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/utilities/utils.rs:9:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::Class;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::numbers::numbers::PrimitiveNumber`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/FiniteField/instances/Zmod_instance.rs","byte_start":473,"byte_end":513,"line_start":12,"line_end":12,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"use crate::numbers::numbers::PrimitiveNumber;","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `crate::numbers::numbers::PrimitiveNumber`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/FiniteField/instances/Zmod_instance.rs:12:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::numbers::numbers::PrimitiveNumber;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2493,"byte_end":2498,"line_start":92,"line_end":92,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn add(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2493,"byte_end":2498,"line_start":92,"line_end":92,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn add(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:92:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn add(&self, other: &Self) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_other`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2580,"byte_end":2585,"line_start":96,"line_end":96,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn sub(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2580,"byte_end":2585,"line_start":96,"line_end":96,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn sub(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:96:19\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m96\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn sub(&self, other: &Self) -> Self {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_other`\u001b[0m\n\n"}
{"message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2667,"byte_end":2672,"line_start":100,"line_end":100,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn mul(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2667,"byte_end":2672,"line_start":100,"line_end":100,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn mul(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:100:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m100\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn mul(&self, other: &Self) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_other`\u001b[0m\n\n"}
{"message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2754,"byte_end":2759,"line_start":104,"line_end":104,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn div(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2754,"byte_end":2759,"line_start":104,"line_end":104,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn div(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:104:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn div(&self, other: &Self) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_other`\u001b[0m\n\n"}
{"message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2947,"byte_end":2952,"line_start":113,"line_end":113,"column_start":28,"column_end":33,"is_primary":true,"text":[{"text":"    fn greater_than(&self, other: &Self) -> bool {","highlight_start":28,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":2947,"byte_end":2952,"line_start":113,"line_end":113,"column_start":28,"column_end":33,"is_primary":true,"text":[{"text":"    fn greater_than(&self, other: &Self) -> bool {","highlight_start":28,"highlight_end":33}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:113:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn greater_than(&self, other: &Self) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_other`\u001b[0m\n\n"}
{"message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":3068,"byte_end":3073,"line_start":117,"line_end":117,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"    fn less_than(&self, other: &Self) -> bool {","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/polynomial_instance.rs","byte_start":3068,"byte_end":3073,"line_start":117,"line_end":117,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"    fn less_than(&self, other: &Self) -> bool {","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/polynomial_instance.rs:117:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn less_than(&self, other: &Self) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_other`\u001b[0m\n\n"}
{"message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":7283,"byte_end":7288,"line_start":215,"line_end":215,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn div(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":7283,"byte_end":7288,"line_start":215,"line_end":215,"column_start":19,"column_end":24,"is_primary":true,"text":[{"text":"    fn div(&self, other: &Self) -> Self {","highlight_start":19,"highlight_end":24}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:215:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m215\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn div(&self, other: &Self) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_other`\u001b[0m\n\n"}
{"message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":7533,"byte_end":7538,"line_start":224,"line_end":224,"column_start":28,"column_end":33,"is_primary":true,"text":[{"text":"    fn greater_than(&self, other: &Self) -> bool {","highlight_start":28,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":7533,"byte_end":7538,"line_start":224,"line_end":224,"column_start":28,"column_end":33,"is_primary":true,"text":[{"text":"    fn greater_than(&self, other: &Self) -> bool {","highlight_start":28,"highlight_end":33}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:224:28\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m224\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn greater_than(&self, other: &Self) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_other`\u001b[0m\n\n"}
{"message":"unused variable: `other`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":7654,"byte_end":7659,"line_start":228,"line_end":228,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"    fn less_than(&self, other: &Self) -> bool {","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":7654,"byte_end":7659,"line_start":228,"line_end":228,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"    fn less_than(&self, other: &Self) -> bool {","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":"_other","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `other`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:228:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn less_than(&self, other: &Self) -> bool {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_other`\u001b[0m\n\n"}
{"message":"value assigned to `sign` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/Rings/instances/PolynomialRing_instance.rs","byte_start":9913,"byte_end":9917,"line_start":292,"line_end":292,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"            let mut sign: String = format!(\"\");","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"`#[warn(unused_assignments)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `sign` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/Rings/instances/PolynomialRing_instance.rs:292:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m292\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut sign: String = format!(\"\");\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_assignments)]` on by default\u001b[0m\n\n"}
{"message":"unused variable: `bit_length`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/FiniteField/instances/Zmod_instance.rs","byte_start":8432,"byte_end":8442,"line_start":297,"line_end":297,"column_start":15,"column_end":25,"is_primary":true,"text":[{"text":"    fn random(bit_length: u64) -> Self {","highlight_start":15,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/algebras/FiniteField/instances/Zmod_instance.rs","byte_start":8432,"byte_end":8442,"line_start":297,"line_end":297,"column_start":15,"column_end":25,"is_primary":true,"text":[{"text":"    fn random(bit_length: u64) -> Self {","highlight_start":15,"highlight_end":25}],"label":null,"suggested_replacement":"_bit_length","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `bit_length`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/FiniteField/instances/Zmod_instance.rs:297:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m297\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn random(bit_length: u64) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_bit_length`\u001b[0m\n\n"}
{"message":"unused variable: `lower_bound`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/FiniteField/instances/Zmod_instance.rs","byte_start":8534,"byte_end":8545,"line_start":301,"line_end":301,"column_start":27,"column_end":38,"is_primary":true,"text":[{"text":"    fn random_with_bounds(lower_bound: BigInt, upper_bound: BigInt) -> Self {","highlight_start":27,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/algebras/FiniteField/instances/Zmod_instance.rs","byte_start":8534,"byte_end":8545,"line_start":301,"line_end":301,"column_start":27,"column_end":38,"is_primary":true,"text":[{"text":"    fn random_with_bounds(lower_bound: BigInt, upper_bound: BigInt) -> Self {","highlight_start":27,"highlight_end":38}],"label":null,"suggested_replacement":"_lower_bound","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `lower_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/FiniteField/instances/Zmod_instance.rs:301:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn random_with_bounds(lower_bound: BigInt, upper_bound: BigInt) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_lower_bound`\u001b[0m\n\n"}
{"message":"unused variable: `upper_bound`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/FiniteField/instances/Zmod_instance.rs","byte_start":8555,"byte_end":8566,"line_start":301,"line_end":301,"column_start":48,"column_end":59,"is_primary":true,"text":[{"text":"    fn random_with_bounds(lower_bound: BigInt, upper_bound: BigInt) -> Self {","highlight_start":48,"highlight_end":59}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/algebras/FiniteField/instances/Zmod_instance.rs","byte_start":8555,"byte_end":8566,"line_start":301,"line_end":301,"column_start":48,"column_end":59,"is_primary":true,"text":[{"text":"    fn random_with_bounds(lower_bound: BigInt, upper_bound: BigInt) -> Self {","highlight_start":48,"highlight_end":59}],"label":null,"suggested_replacement":"_upper_bound","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `upper_bound`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/FiniteField/instances/Zmod_instance.rs:301:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m301\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn random_with_bounds(lower_bound: BigInt, upper_bound: BigInt) -> Self {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_upper_bound`\u001b[0m\n\n"}
{"message":"value assigned to `p` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":1714,"byte_end":1715,"line_start":57,"line_end":57,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        let mut p: BigInt = BigInt::from(1);","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `p` is never read\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:57:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m57\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut p: BigInt = BigInt::from(1);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"message":"unused variable: `e`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":2799,"byte_end":2800,"line_start":90,"line_end":90,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    for (p, e) in factors_.into_iter() {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":2799,"byte_end":2800,"line_start":90,"line_end":90,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"    for (p, e) in factors_.into_iter() {","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"_e","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `e`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:90:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for (p, e) in factors_.into_iter() {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_e`\u001b[0m\n\n"}
{"message":"unused variable: `factor`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":4157,"byte_end":4163,"line_start":139,"line_end":139,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"            let factor: BigInt = BigInt::from(2);","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":4157,"byte_end":4163,"line_start":139,"line_end":139,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"            let factor: BigInt = BigInt::from(2);","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":"_factor","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `factor`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:139:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let factor: BigInt = BigInt::from(2);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_factor`\u001b[0m\n\n"}
{"message":"unused variable: `q`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6282,"byte_end":6283,"line_start":210,"line_end":210,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"    pub fn gen_powers(N: usize, q: BigInt, zeta: BigInt, findeg: usize) -> Vec<BigInt> {","highlight_start":33,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6282,"byte_end":6283,"line_start":210,"line_end":210,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"    pub fn gen_powers(N: usize, q: BigInt, zeta: BigInt, findeg: usize) -> Vec<BigInt> {","highlight_start":33,"highlight_end":34}],"label":null,"suggested_replacement":"_q","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `q`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:210:33\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn gen_powers(N: usize, q: BigInt, zeta: BigInt, findeg: usize) -> Vec<BigInt> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_q`\u001b[0m\n\n"}
{"message":"unused variable: `zeta`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6293,"byte_end":6297,"line_start":210,"line_end":210,"column_start":44,"column_end":48,"is_primary":true,"text":[{"text":"    pub fn gen_powers(N: usize, q: BigInt, zeta: BigInt, findeg: usize) -> Vec<BigInt> {","highlight_start":44,"highlight_end":48}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6293,"byte_end":6297,"line_start":210,"line_end":210,"column_start":44,"column_end":48,"is_primary":true,"text":[{"text":"    pub fn gen_powers(N: usize, q: BigInt, zeta: BigInt, findeg: usize) -> Vec<BigInt> {","highlight_start":44,"highlight_end":48}],"label":null,"suggested_replacement":"_zeta","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `zeta`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:210:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn gen_powers(N: usize, q: BigInt, zeta: BigInt, findeg: usize) -> Vec<BigInt> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_zeta`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6395,"byte_end":6401,"line_start":212,"line_end":212,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"            let mut N_ : usize;","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_mut)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6395,"byte_end":6399,"line_start":212,"line_end":212,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let mut N_ : usize;","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:212:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut N_ : usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_mut)]` on by default\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":7170,"byte_end":7176,"line_start":234,"line_end":234,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"            let mut N_: usize = N/2;","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":7170,"byte_end":7174,"line_start":234,"line_end":234,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let mut N_: usize = N/2;","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:234:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut N_: usize = N/2;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"value assigned to `j` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":12302,"byte_end":12303,"line_start":379,"line_end":379,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        let mut j = 0;","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `j` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:379:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m379\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut j = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"message":"unused variable: `W`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11916,"byte_end":11917,"line_start":371,"line_end":371,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11916,"byte_end":11917,"line_start":371,"line_end":371,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"_W","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `W`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:371:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_W`\u001b[0m\n\n"}
{"message":"unused variable: `prec`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11949,"byte_end":11953,"line_start":371,"line_end":371,"column_start":77,"column_end":81,"is_primary":true,"text":[{"text":"    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":77,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11949,"byte_end":11953,"line_start":371,"line_end":371,"column_start":77,"column_end":81,"is_primary":true,"text":[{"text":"    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":77,"highlight_end":81}],"label":null,"suggested_replacement":"_prec","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `prec`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:371:77\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_prec`\u001b[0m\n\n"}
{"message":"unused variable: `N`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":12902,"byte_end":12903,"line_start":407,"line_end":407,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"    pub fn iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":12902,"byte_end":12903,"line_start":407,"line_end":407,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"    pub fn iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":"_N","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `N`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:407:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_N`\u001b[0m\n\n"}
{"message":"unused variable: `N`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":13996,"byte_end":13997,"line_start":439,"line_end":439,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let N = self.N;","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":13996,"byte_end":13997,"line_start":439,"line_end":439,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let N = self.N;","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"_N","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `N`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:439:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let N = self.N;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_N`\u001b[0m\n\n"}
{"message":"unused variable: `q`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":14020,"byte_end":14021,"line_start":440,"line_end":440,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let q = self.q.clone();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":14020,"byte_end":14021,"line_start":440,"line_end":440,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let q = self.q.clone();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"_q","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `q`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:440:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m440\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let q = self.q.clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_q`\u001b[0m\n\n"}
{"message":"value assigned to `j` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18742,"byte_end":18743,"line_start":574,"line_end":574,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"        let mut j = 0;","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `j` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:574:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m574\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut j = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"message":"unused variable: `W_inv`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18522,"byte_end":18527,"line_start":570,"line_end":570,"column_start":42,"column_end":47,"is_primary":true,"text":[{"text":"    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {","highlight_start":42,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18522,"byte_end":18527,"line_start":570,"line_end":570,"column_start":42,"column_end":47,"is_primary":true,"text":[{"text":"    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {","highlight_start":42,"highlight_end":47}],"label":null,"suggested_replacement":"_W_inv","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `W_inv`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:570:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_W_inv`\u001b[0m\n\n"}
{"message":"unused variable: `prec`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18570,"byte_end":18574,"line_start":570,"line_end":570,"column_start":90,"column_end":94,"is_primary":true,"text":[{"text":"    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {","highlight_start":90,"highlight_end":94}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18570,"byte_end":18574,"line_start":570,"line_end":570,"column_start":90,"column_end":94,"is_primary":true,"text":[{"text":"    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {","highlight_start":90,"highlight_end":94}],"label":null,"suggested_replacement":"_prec","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `prec`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:570:90\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_prec`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18676,"byte_end":18687,"line_start":572,"line_end":572,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"        let mut l_upper = N/2;","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18676,"byte_end":18680,"line_start":572,"line_end":572,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut l_upper = N/2;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:572:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m572\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut l_upper = N/2;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":22975,"byte_end":22981,"line_start":691,"line_end":691,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"        let mut N2: usize;","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":22975,"byte_end":22979,"line_start":691,"line_end":691,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut N2: usize;","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:691:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut N2: usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"unused variable: `aux_zero`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/arith/primes.rs","byte_start":2769,"byte_end":2777,"line_start":115,"line_end":115,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    let aux_zero: BigUint = BigUint::from(0u32);","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/arith/primes.rs","byte_start":2769,"byte_end":2777,"line_start":115,"line_end":115,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"    let aux_zero: BigUint = BigUint::from(0u32);","highlight_start":9,"highlight_end":17}],"label":null,"suggested_replacement":"_aux_zero","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `aux_zero`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/arith/primes.rs:115:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let aux_zero: BigUint = BigUint::from(0u32);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_aux_zero`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/arith/primes.rs","byte_start":3185,"byte_end":3190,"line_start":125,"line_end":125,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"            let mut y = x.modpow(&aux_two, n);","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/arith/primes.rs","byte_start":3185,"byte_end":3189,"line_start":125,"line_end":125,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let mut y = x.modpow(&aux_two, n);","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/arith/primes.rs:125:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut y = x.modpow(&aux_two, n);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"unused variable: `aux_one`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/arith/primes.rs","byte_start":3576,"byte_end":3583,"line_start":145,"line_end":145,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let aux_one: BigInt = BigInt::from(1);","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/arith/primes.rs","byte_start":3576,"byte_end":3583,"line_start":145,"line_end":145,"column_start":9,"column_end":16,"is_primary":true,"text":[{"text":"    let aux_one: BigInt = BigInt::from(1);","highlight_start":9,"highlight_end":16}],"label":null,"suggested_replacement":"_aux_one","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `aux_one`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/arith/primes.rs:145:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m145\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let aux_one: BigInt = BigInt::from(1);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_aux_one`\u001b[0m\n\n"}
{"message":"value assigned to `smallest_prime` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/arith/primes.rs","byte_start":6318,"byte_end":6332,"line_start":223,"line_end":223,"column_start":29,"column_end":43,"is_primary":true,"text":[{"text":"                    let mut smallest_prime: ZZinstance = n.clone();","highlight_start":29,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `smallest_prime` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/arith/primes.rs:223:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m223\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let mut smallest_prime: ZZinstance = n.clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"message":"value assigned to `result` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/arith/primes.rs","byte_start":7148,"byte_end":7154,"line_start":253,"line_end":253,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    let mut result: BigInt = BigInt::from(2);","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `result` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/arith/primes.rs:253:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut result: BigInt = BigInt::from(2);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"message":"value assigned to `smallest_prime` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/arith/primes.rs","byte_start":8364,"byte_end":8378,"line_start":279,"line_end":279,"column_start":29,"column_end":43,"is_primary":true,"text":[{"text":"                    let mut smallest_prime: ZZinstance = n.clone();","highlight_start":29,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `smallest_prime` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/arith/primes.rs:279:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let mut smallest_prime: ZZinstance = n.clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"message":"unused variable: `p`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":1169,"byte_end":1170,"line_start":28,"line_end":28,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        let (p,q, d) = self.private_keys[self.primary_key].clone();","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":1169,"byte_end":1170,"line_start":28,"line_end":28,"column_start":14,"column_end":15,"is_primary":true,"text":[{"text":"        let (p,q, d) = self.private_keys[self.primary_key].clone();","highlight_start":14,"highlight_end":15}],"label":null,"suggested_replacement":"_p","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `p`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/rsa.rs:28:14\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (p,q, d) = self.private_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_p`\u001b[0m\n\n"}
{"message":"unused variable: `q`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":1171,"byte_end":1172,"line_start":28,"line_end":28,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"        let (p,q, d) = self.private_keys[self.primary_key].clone();","highlight_start":16,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":1171,"byte_end":1172,"line_start":28,"line_end":28,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"        let (p,q, d) = self.private_keys[self.primary_key].clone();","highlight_start":16,"highlight_end":17}],"label":null,"suggested_replacement":"_q","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `q`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/rsa.rs:28:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (p,q, d) = self.private_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_q`\u001b[0m\n\n"}
{"message":"unused variable: `e`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":1239,"byte_end":1240,"line_start":29,"line_end":29,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"        let (n,e) = self.public_keys[self.primary_key].clone();","highlight_start":16,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/rsa.rs","byte_start":1239,"byte_end":1240,"line_start":29,"line_end":29,"column_start":16,"column_end":17,"is_primary":true,"text":[{"text":"        let (n,e) = self.public_keys[self.primary_key].clone();","highlight_start":16,"highlight_end":17}],"label":null,"suggested_replacement":"_e","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `e`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/rsa.rs:29:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (n,e) = self.public_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_e`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":1486,"byte_end":1498,"line_start":17,"line_end":17,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round(); //% q1; // values are yet modulo q","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":1486,"byte_end":1490,"line_start":17,"line_end":17,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round(); //% q1; // values are yet modulo q","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:17:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round(); //% q1; // values are yet modulo q\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":2056,"byte_end":2068,"line_start":26,"line_end":26,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round() % modulo; // values are yet modulo q","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":2056,"byte_end":2060,"line_start":26,"line_end":26,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round() % modulo; // values are yet modulo q","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:26:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round() % modulo; // values are yet modulo q\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"unused variable: `i`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":2537,"byte_end":2538,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    for i in (plaintext.len()*8)..size {","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":2537,"byte_end":2538,"line_start":39,"line_end":39,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    for i in (plaintext.len()*8)..size {","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"_i","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `i`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:39:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for i in (plaintext.len()*8)..size {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_i`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9911,"byte_end":9916,"line_start":211,"line_end":211,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9911,"byte_end":9915,"line_start":211,"line_end":211,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:211:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut A, mut b) = self.public_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":11172,"byte_end":11184,"line_start":234,"line_end":234,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        let mut decomp_v = self.ring.apply_ntt_ctxt(&decompress(v.unwrap_from_ring(), self.field.module.as_ref().unwrap().clone(), self.dv).quotient(self.ring.irreducible_polynomial.clone(), true, false));","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":11172,"byte_end":11176,"line_start":234,"line_end":234,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut decomp_v = self.ring.apply_ntt_ctxt(&decompress(v.unwrap_from_ring(), self.field.module.as_ref().unwrap().clone(), self.dv).quotient(self.ring.irreducible_polynomial.clone(), true, false));","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:234:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let mut decomp_v = self.ring.apply_ntt_ctxt(&decompress(v.unwrap_from_ring(), self.field.module.as_ref().unwrap().clone(), self.dv).quotient(self.ring.irreducible_polynomial.clone(), t\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":11378,"byte_end":11393,"line_start":235,"line_end":235,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"        let mut temp_result = decomp_v - (self.private_keys[self.primary_key].transpose()*U).values[0].clone();","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":11378,"byte_end":11382,"line_start":235,"line_end":235,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut temp_result = decomp_v - (self.private_keys[self.primary_key].transpose()*U).values[0].clone();","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:235:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut temp_result = decomp_v - (self.private_keys[self.primary_key].transpose()*U).values[0].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":17510,"byte_end":17515,"line_start":367,"line_end":367,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":17510,"byte_end":17514,"line_start":367,"line_end":367,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:367:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m367\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut A, mut b) = self.public_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":18771,"byte_end":18783,"line_start":390,"line_end":390,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        let mut decomp_v = self.ring.apply_ntt_ctxt(&decompress(v.unwrap_from_ring(), self.field.module.as_ref().unwrap().clone(), self.dv).quotient(self.ring.irreducible_polynomial.clone(), true, false));","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":18771,"byte_end":18775,"line_start":390,"line_end":390,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut decomp_v = self.ring.apply_ntt_ctxt(&decompress(v.unwrap_from_ring(), self.field.module.as_ref().unwrap().clone(), self.dv).quotient(self.ring.irreducible_polynomial.clone(), true, false));","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:390:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let mut decomp_v = self.ring.apply_ntt_ctxt(&decompress(v.unwrap_from_ring(), self.field.module.as_ref().unwrap().clone(), self.dv).quotient(self.ring.irreducible_polynomial.clone(), t\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":18977,"byte_end":18992,"line_start":391,"line_end":391,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"        let mut temp_result = decomp_v - (self.private_keys[self.primary_key].transpose()*U).values[0].clone();","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":18977,"byte_end":18981,"line_start":391,"line_end":391,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut temp_result = decomp_v - (self.private_keys[self.primary_key].transpose()*U).values[0].clone();","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:391:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m391\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut temp_result = decomp_v - (self.private_keys[self.primary_key].transpose()*U).values[0].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":25110,"byte_end":25115,"line_start":521,"line_end":521,"column_start":21,"column_end":26,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":21,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":25110,"byte_end":25114,"line_start":521,"line_end":521,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:521:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m521\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut A, mut b) = self.public_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":26371,"byte_end":26383,"line_start":544,"line_end":544,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        let mut decomp_v = self.ring.apply_ntt_ctxt(&decompress(v.unwrap_from_ring(), self.field.module.as_ref().unwrap().clone(), self.dv).quotient(self.ring.irreducible_polynomial.clone(), true, false));","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":26371,"byte_end":26375,"line_start":544,"line_end":544,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut decomp_v = self.ring.apply_ntt_ctxt(&decompress(v.unwrap_from_ring(), self.field.module.as_ref().unwrap().clone(), self.dv).quotient(self.ring.irreducible_polynomial.clone(), true, false));","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:544:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let mut decomp_v = self.ring.apply_ntt_ctxt(&decompress(v.unwrap_from_ring(), self.field.module.as_ref().unwrap().clone(), self.dv).quotient(self.ring.irreducible_polynomial.clone(), t\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":26577,"byte_end":26592,"line_start":545,"line_end":545,"column_start":13,"column_end":28,"is_primary":true,"text":[{"text":"        let mut temp_result = decomp_v - (self.private_keys[self.primary_key].transpose()*U).values[0].clone();","highlight_start":13,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":26577,"byte_end":26581,"line_start":545,"line_end":545,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut temp_result = decomp_v - (self.private_keys[self.primary_key].transpose()*U).values[0].clone();","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:545:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m545\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut temp_result = decomp_v - (self.private_keys[self.primary_key].transpose()*U).values[0].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":1624,"byte_end":1636,"line_start":17,"line_end":17,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round(); //% q1; // values are yet modulo q","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":1624,"byte_end":1628,"line_start":17,"line_end":17,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round(); //% q1; // values are yet modulo q","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:17:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round(); //% q1; // values are yet modulo q\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":2194,"byte_end":2206,"line_start":26,"line_end":26,"column_start":9,"column_end":21,"is_primary":true,"text":[{"text":"    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round() % modulo; // values are yet modulo q","highlight_start":9,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":2194,"byte_end":2198,"line_start":26,"line_end":26,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round() % modulo; // values are yet modulo q","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:26:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m26\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut new_poly = (r_class.apply_to_univariate_poly(poly) * factor).round() % modulo; // values are yet modulo q\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"unused variable: `number_of_bytes`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":2847,"byte_end":2862,"line_start":43,"line_end":43,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"    let number_of_bytes = (poly.degree()+1)/8;","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":2847,"byte_end":2862,"line_start":43,"line_end":43,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"    let number_of_bytes = (poly.degree()+1)/8;","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":"_number_of_bytes","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `number_of_bytes`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:43:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let number_of_bytes = (poly.degree()+1)/8;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_number_of_bytes`\u001b[0m\n\n"}
{"message":"unused variable: `plaintext`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":2898,"byte_end":2907,"line_start":44,"line_end":44,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    let mut plaintext: Vec<u8> = Vec::new();","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":2898,"byte_end":2907,"line_start":44,"line_end":44,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"    let mut plaintext: Vec<u8> = Vec::new();","highlight_start":13,"highlight_end":22}],"label":null,"suggested_replacement":"_plaintext","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `plaintext`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:44:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut plaintext: Vec<u8> = Vec::new();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_plaintext`\u001b[0m\n\n"}
{"message":"unused variable: `bit_value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":3297,"byte_end":3306,"line_start":54,"line_end":54,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"            let bit_value = 0;","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":3297,"byte_end":3306,"line_start":54,"line_end":54,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"            let bit_value = 0;","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":"_bit_value","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `bit_value`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:54:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let bit_value = 0;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_bit_value`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":2894,"byte_end":2907,"line_start":44,"line_end":44,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    let mut plaintext: Vec<u8> = Vec::new();","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":2894,"byte_end":2898,"line_start":44,"line_end":44,"column_start":9,"column_end":13,"is_primary":true,"text":[{"text":"    let mut plaintext: Vec<u8> = Vec::new();","highlight_start":9,"highlight_end":13}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:44:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let mut plaintext: Vec<u8> = Vec::new();\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":3328,"byte_end":3337,"line_start":55,"line_end":55,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"            let mut coeff: BigInt;","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":3328,"byte_end":3332,"line_start":55,"line_end":55,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let mut coeff: BigInt;","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:55:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m55\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut coeff: BigInt;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"unused variable: `i`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":4133,"byte_end":4134,"line_start":80,"line_end":80,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    for i in (plaintext.len()*8)..size {","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":4133,"byte_end":4134,"line_start":80,"line_end":80,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    for i in (plaintext.len()*8)..size {","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"_i","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `i`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:80:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    for i in (plaintext.len()*8)..size {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_i`\u001b[0m\n\n"}
{"message":"unused variable: `number_of_bytes`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":4785,"byte_end":4800,"line_start":106,"line_end":106,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"    let number_of_bytes = (poly.degree()+1)/8;","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":4785,"byte_end":4800,"line_start":106,"line_end":106,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"    let number_of_bytes = (poly.degree()+1)/8;","highlight_start":9,"highlight_end":24}],"label":null,"suggested_replacement":"_number_of_bytes","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `number_of_bytes`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:106:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    let number_of_bytes = (poly.degree()+1)/8;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_number_of_bytes`\u001b[0m\n\n"}
{"message":"unused variable: `bit_value`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":5241,"byte_end":5250,"line_start":117,"line_end":117,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"            let bit_value = 0;","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":5241,"byte_end":5250,"line_start":117,"line_end":117,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"            let bit_value = 0;","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":"_bit_value","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `bit_value`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:117:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let bit_value = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_bit_value`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":5272,"byte_end":5281,"line_start":118,"line_end":118,"column_start":17,"column_end":26,"is_primary":true,"text":[{"text":"            let mut coeff: BigInt;","highlight_start":17,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":5272,"byte_end":5276,"line_start":118,"line_end":118,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let mut coeff: BigInt;","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:118:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut coeff: BigInt;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11224,"byte_end":11236,"line_start":262,"line_end":262,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        let mut c1_tilde = (C1.clone()* delta.clone()).round() % self.q.module.clone().unwrap();","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11224,"byte_end":11228,"line_start":262,"line_end":262,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut c1_tilde = (C1.clone()* delta.clone()).round() % self.q.module.clone().unwrap();","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:262:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut c1_tilde = (C1.clone()* delta.clone()).round() % self.q.module.clone().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11321,"byte_end":11333,"line_start":263,"line_end":263,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        let mut c2_tilde = (C2.clone() * delta.clone()).round() % self.q.module.clone().unwrap();","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11321,"byte_end":11325,"line_start":263,"line_end":263,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut c2_tilde = (C2.clone() * delta.clone()).round() % self.q.module.clone().unwrap();","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:263:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m263\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut c2_tilde = (C2.clone() * delta.clone()).round() % self.q.module.clone().unwrap();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11419,"byte_end":11431,"line_start":264,"line_end":264,"column_start":13,"column_end":25,"is_primary":true,"text":[{"text":"        let mut c3_tilde = (C3.clone() * delta).round() % self.q.module.clone().unwrap(); // values are yet modulo q","highlight_start":13,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11419,"byte_end":11423,"line_start":264,"line_end":264,"column_start":13,"column_end":17,"is_primary":true,"text":[{"text":"        let mut c3_tilde = (C3.clone() * delta).round() % self.q.module.clone().unwrap(); // values are yet modulo q","highlight_start":13,"highlight_end":17}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:264:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m264\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut c3_tilde = (C3.clone() * delta).round() % self.q.module.clone().unwrap(); // values are yet modulo q\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":13382,"byte_end":13394,"line_start":307,"line_end":307,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"            let mut new_poly = (r_class.apply_to_univariate_poly(tmp2.unwrap_from_ring()) * delta).round(); //% q1; // values are yet modulo q","highlight_start":17,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":13382,"byte_end":13386,"line_start":307,"line_end":307,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let mut new_poly = (r_class.apply_to_univariate_poly(tmp2.unwrap_from_ring()) * delta).round(); //% q1; // values are yet modulo q","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:307:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m307\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut new_poly = (r_class.apply_to_univariate_poly(tmp2.unwrap_from_ring()) * delta).round(); //% q1; // values are yet modulo q\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"variable does not need to be mutable","code":{"code":"unused_mut","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":14330,"byte_end":14342,"line_start":324,"line_end":324,"column_start":17,"column_end":29,"is_primary":true,"text":[{"text":"            let mut new_poly = (r_class.apply_to_poly_ring(tmp2)* delta).round(); //% q1; // values are yet modulo q","highlight_start":17,"highlight_end":29}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove this `mut`","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":14330,"byte_end":14334,"line_start":324,"line_end":324,"column_start":17,"column_end":21,"is_primary":true,"text":[{"text":"            let mut new_poly = (r_class.apply_to_poly_ring(tmp2)* delta).round(); //% q1; // values are yet modulo q","highlight_start":17,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable does not need to be mutable\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:324:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m324\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut new_poly = (r_class.apply_to_poly_ring(tmp2)* delta).round(); //% q1; // values are yet modulo q\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----\u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mhelp: remove this `mut`\u001b[0m\n\n"}
{"message":"unused variable: `padding`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":652,"byte_end":659,"line_start":31,"line_end":31,"column_start":26,"column_end":33,"is_primary":true,"text":[{"text":"    fn init(mode: Modes, padding: Paddings) -> Box<dyn AESinterface> {","highlight_start":26,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":652,"byte_end":659,"line_start":31,"line_end":31,"column_start":26,"column_end":33,"is_primary":true,"text":[{"text":"    fn init(mode: Modes, padding: Paddings) -> Box<dyn AESinterface> {","highlight_start":26,"highlight_end":33}],"label":null,"suggested_replacement":"_padding","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `padding`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/symmetric/primitives/aes.rs:31:26\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn init(mode: Modes, padding: Paddings) -> Box<dyn AESinterface> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_padding`\u001b[0m\n\n"}
{"message":"value assigned to `blocks` is never read","code":{"code":"unused_assignments","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":3621,"byte_end":3627,"line_start":128,"line_end":128,"column_start":17,"column_end":23,"is_primary":true,"text":[{"text":"        let mut blocks = 0;","highlight_start":17,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"maybe it is overwritten before being read?","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: value assigned to `blocks` is never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/symmetric/primitives/aes.rs:128:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut blocks = 0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: maybe it is overwritten before being read?\u001b[0m\n\n"}
{"message":"unused variable: `plaintext`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":5991,"byte_end":6000,"line_start":198,"line_end":198,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"    fn encrypt(&mut self, plaintext: Vec<u8>) -> Vec<u8> {","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":5991,"byte_end":6000,"line_start":198,"line_end":198,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"    fn encrypt(&mut self, plaintext: Vec<u8>) -> Vec<u8> {","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"_plaintext","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `plaintext`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/symmetric/primitives/aes.rs:198:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m198\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn encrypt(&mut self, plaintext: Vec<u8>) -> Vec<u8> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_plaintext`\u001b[0m\n\n"}
{"message":"unused variable: `plaintext`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":9011,"byte_end":9020,"line_start":299,"line_end":299,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"    fn encrypt(&mut self, plaintext: Vec<u8>) -> Vec<u8> {","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/cryptography/symmetric/primitives/aes.rs","byte_start":9011,"byte_end":9020,"line_start":299,"line_end":299,"column_start":27,"column_end":36,"is_primary":true,"text":[{"text":"    fn encrypt(&mut self, plaintext: Vec<u8>) -> Vec<u8> {","highlight_start":27,"highlight_end":36}],"label":null,"suggested_replacement":"_plaintext","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `plaintext`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/symmetric/primitives/aes.rs:299:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn encrypt(&mut self, plaintext: Vec<u8>) -> Vec<u8> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_plaintext`\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":5884,"byte_end":5885,"line_start":189,"line_end":189,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            _=>panic!(\"Method not found\")        ","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unreachable_patterns)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/padding/padding.rs:189:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m189\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _=>panic!(\"Method not found\")        \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unreachable_patterns)]` on by default\u001b[0m\n\n"}
{"message":"unreachable pattern","code":{"code":"unreachable_patterns","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/padding/padding.rs","byte_start":6480,"byte_end":6481,"line_start":200,"line_end":200,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"            _=>panic!(\"Method not found\")        ","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unreachable pattern\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/padding/padding.rs:200:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            _=>panic!(\"Method not found\")        \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\n\n"}
{"message":"function `clean` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/poly/instances/univariate_polynomial_instance.rs","byte_start":1167,"byte_end":1172,"line_start":36,"line_end":36,"column_start":4,"column_end":9,"is_primary":true,"text":[{"text":"fn clean<T>(mut coeff: Vec<T>) -> Vec<T> where T: Instance + Operand + Clone + Number {","highlight_start":4,"highlight_end":9}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(dead_code)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `clean` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/poly/instances/univariate_polynomial_instance.rs:36:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn clean<T>(mut coeff: Vec<T>) -> Vec<T> where T: Instance + Operand + Clone + Number {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(dead_code)]` on by default\u001b[0m\n\n"}
{"message":"function `compress` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":1184,"byte_end":1192,"line_start":12,"line_end":12,"column_start":4,"column_end":12,"is_primary":true,"text":[{"text":"fn compress<T>(poly: UnivariatePolynomialInstance<T>, modulo: ZZinstance, d: usize) -> UnivariatePolynomialInstance<ZmodInstance> where T: Display + Instance + Clone + Eq + Operand + Number {","highlight_start":4,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `compress` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:12:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn compress<T>(poly: UnivariatePolynomialInstance<T>, modulo: ZZinstance, d: usize) -> UnivariatePolynomialInstance<ZmodInstance> where T: Display + Instance + Clone + Eq + Operand + Number {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^\u001b[0m\n\n"}
{"message":"function `decompress` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":1758,"byte_end":1768,"line_start":22,"line_end":22,"column_start":4,"column_end":14,"is_primary":true,"text":[{"text":"fn decompress<T>(poly: UnivariatePolynomialInstance<T>, modulo: ZZinstance, d: usize) -> UnivariatePolynomialInstance<ZmodInstance> where T: Instance + Clone + Eq + Operand + Number {","highlight_start":4,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `decompress` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:22:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn decompress<T>(poly: UnivariatePolynomialInstance<T>, modulo: ZZinstance, d: usize) -> UnivariatePolynomialInstance<ZmodInstance> where T: Instance + Clone + Eq + Operand + Number {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"message":"function `plaintext_to_poly` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":3773,"byte_end":3790,"line_start":71,"line_end":71,"column_start":4,"column_end":21,"is_primary":true,"text":[{"text":"fn plaintext_to_poly(plaintext: Vec<u8>, size: usize) -> UnivariatePolynomialInstance<ZZinstance> {","highlight_start":4,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `plaintext_to_poly` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:71:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m71\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn plaintext_to_poly(plaintext: Vec<u8>, size: usize) -> UnivariatePolynomialInstance<ZZinstance> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"function `bigint_to_vecu8` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":4388,"byte_end":4403,"line_start":90,"line_end":90,"column_start":4,"column_end":19,"is_primary":true,"text":[{"text":"fn bigint_to_vecu8(value: BigInt) -> Vec<u8> {","highlight_start":4,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `bigint_to_vecu8` is never used\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:90:4\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m90\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn bigint_to_vecu8(value: BigInt) -> Vec<u8> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"function `poly_to_plaintext` is never used","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":4671,"byte_end":4688,"line_start":105,"line_end":105,"column_start":4,"column_end":21,"is_primary":true,"text":[{"text":"fn poly_to_plaintext(poly: UnivariatePolynomialInstance<ZmodInstance>, threshold_prime: BigInt) -> Vec<u8> {","highlight_start":4,"highlight_end":21}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: function `poly_to_plaintext` is never used\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:105:4\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m105\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mfn poly_to_plaintext(poly: UnivariatePolynomialInstance<ZmodInstance>, threshold_prime: BigInt) -> Vec<u8> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"fields `mu` and `sigma` are never read","code":{"code":"dead_code","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":7257,"byte_end":7260,"line_start":174,"line_end":174,"column_start":12,"column_end":15,"is_primary":false,"text":[{"text":"pub struct BFV {","highlight_start":12,"highlight_end":15}],"label":"fields in this struct","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":7537,"byte_end":7539,"line_start":181,"line_end":181,"column_start":5,"column_end":7,"is_primary":true,"text":[{"text":"    mu: usize,","highlight_start":5,"highlight_end":7}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":7552,"byte_end":7557,"line_start":182,"line_end":182,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"    sigma: usize,","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: fields `mu` and `sigma` are never read\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:181:5\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct BFV {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mfields in this struct\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    mu: usize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m182\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    sigma: usize,\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"message":"module `Class` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":359,"byte_end":364,"line_start":17,"line_end":17,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"        pub mod Class;","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(non_snake_case)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":359,"byte_end":364,"line_start":17,"line_end":17,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"        pub mod Class;","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":"class","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `Class` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:17:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod Class;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `class`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(non_snake_case)]` on by default\u001b[0m\n\n"}
{"message":"module `QQ` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":440,"byte_end":442,"line_start":22,"line_end":22,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"        pub mod QQ;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":440,"byte_end":442,"line_start":22,"line_end":22,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"        pub mod QQ;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":"qq","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `QQ` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:22:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod QQ;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `qq`\u001b[0m\n\n"}
{"message":"module `RR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":460,"byte_end":462,"line_start":23,"line_end":23,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"        pub mod RR;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":460,"byte_end":462,"line_start":23,"line_end":23,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"        pub mod RR;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":"rr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `RR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:23:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod RR;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rr`\u001b[0m\n\n"}
{"message":"module `ZZ` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":480,"byte_end":482,"line_start":24,"line_end":24,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"        pub mod ZZ;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":480,"byte_end":482,"line_start":24,"line_end":24,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"        pub mod ZZ;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":"zz","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `ZZ` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:24:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod ZZ;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `zz`\u001b[0m\n\n"}
{"message":"module `QQ_instance` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":531,"byte_end":542,"line_start":28,"line_end":28,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"        pub mod QQ_instance;","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":531,"byte_end":542,"line_start":28,"line_end":28,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"        pub mod QQ_instance;","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":"qq_instance","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `QQ_instance` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:28:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod QQ_instance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `qq_instance`\u001b[0m\n\n"}
{"message":"module `RR_instance` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":560,"byte_end":571,"line_start":29,"line_end":29,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"        pub mod RR_instance;","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":560,"byte_end":571,"line_start":29,"line_end":29,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"        pub mod RR_instance;","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":"rr_instance","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `RR_instance` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:29:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod RR_instance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rr_instance`\u001b[0m\n\n"}
{"message":"module `ZZ_instance` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":589,"byte_end":600,"line_start":30,"line_end":30,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"        pub mod ZZ_instance;","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":589,"byte_end":600,"line_start":30,"line_end":30,"column_start":17,"column_end":28,"is_primary":true,"text":[{"text":"        pub mod ZZ_instance;","highlight_start":17,"highlight_end":28}],"label":null,"suggested_replacement":"zz_instance","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `ZZ_instance` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:30:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m30\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod ZZ_instance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `zz_instance`\u001b[0m\n\n"}
{"message":"module `test_ZZ` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":788,"byte_end":795,"line_start":49,"line_end":49,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    pub mod test_ZZ;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":788,"byte_end":795,"line_start":49,"line_end":49,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    pub mod test_ZZ;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"test_zz","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `test_ZZ` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:49:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m49\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod test_ZZ;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `test_zz`\u001b[0m\n\n"}
{"message":"module `test_RR` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":809,"byte_end":816,"line_start":50,"line_end":50,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    pub mod test_RR;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":809,"byte_end":816,"line_start":50,"line_end":50,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    pub mod test_RR;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"test_rr","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `test_RR` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:50:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m50\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod test_RR;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `test_rr`\u001b[0m\n\n"}
{"message":"module `test_QQ` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":830,"byte_end":837,"line_start":51,"line_end":51,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    pub mod test_QQ;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":830,"byte_end":837,"line_start":51,"line_end":51,"column_start":13,"column_end":20,"is_primary":true,"text":[{"text":"    pub mod test_QQ;","highlight_start":13,"highlight_end":20}],"label":null,"suggested_replacement":"test_qq","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `test_QQ` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:51:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m51\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod test_QQ;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `test_qq`\u001b[0m\n\n"}
{"message":"module `Rings` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":874,"byte_end":879,"line_start":56,"line_end":56,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    pub mod Rings {","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":874,"byte_end":879,"line_start":56,"line_end":56,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"    pub mod Rings {","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":"rings","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `Rings` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:56:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod Rings {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rings`\u001b[0m\n\n"}
{"message":"module `Groups` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1058,"byte_end":1064,"line_start":67,"line_end":67,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    pub mod Groups {","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1058,"byte_end":1064,"line_start":67,"line_end":67,"column_start":13,"column_end":19,"is_primary":true,"text":[{"text":"    pub mod Groups {","highlight_start":13,"highlight_end":19}],"label":null,"suggested_replacement":"groups","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `Groups` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:67:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod Groups {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `groups`\u001b[0m\n\n"}
{"message":"module `FiniteField` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1461,"byte_end":1472,"line_start":80,"line_end":80,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"    pub mod FiniteField {","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1461,"byte_end":1472,"line_start":80,"line_end":80,"column_start":13,"column_end":24,"is_primary":true,"text":[{"text":"    pub mod FiniteField {","highlight_start":13,"highlight_end":24}],"label":null,"suggested_replacement":"finite_field","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `FiniteField` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:80:13\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub mod FiniteField {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `finite_field`\u001b[0m\n\n"}
{"message":"module `PolynomialRing` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":928,"byte_end":942,"line_start":58,"line_end":58,"column_start":21,"column_end":35,"is_primary":true,"text":[{"text":"            pub mod PolynomialRing;","highlight_start":21,"highlight_end":35}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":928,"byte_end":942,"line_start":58,"line_end":58,"column_start":21,"column_end":35,"is_primary":true,"text":[{"text":"            pub mod PolynomialRing;","highlight_start":21,"highlight_end":35}],"label":null,"suggested_replacement":"polynomial_ring","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `PolynomialRing` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:58:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pub mod PolynomialRing;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `polynomial_ring`\u001b[0m\n\n"}
{"message":"variable `C` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/Rings/classes/PolynomialRing.rs","byte_start":15292,"byte_end":15293,"line_start":332,"line_end":332,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                let mut C: Vec<T> = vec![zero.clone(); len];","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/algebras/Rings/classes/PolynomialRing.rs","byte_start":15292,"byte_end":15293,"line_start":332,"line_end":332,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                let mut C: Vec<T> = vec![zero.clone(); len];","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":"c","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/Rings/classes/PolynomialRing.rs:332:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m332\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let mut C: Vec<T> = vec![zero.clone(); len];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c`\u001b[0m\n\n"}
{"message":"variable `D` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/algebras/Rings/classes/PolynomialRing.rs","byte_start":15353,"byte_end":15354,"line_start":333,"line_end":333,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                let mut D: Vec<T> = vec![zero.clone(); x.coefficients.len()];","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/algebras/Rings/classes/PolynomialRing.rs","byte_start":15353,"byte_end":15354,"line_start":333,"line_end":333,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                let mut D: Vec<T> = vec![zero.clone(); x.coefficients.len()];","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":"d","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `D` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/algebras/Rings/classes/PolynomialRing.rs:333:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m333\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let mut D: Vec<T> = vec![zero.clone(); x.coefficients.len()];\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `d`\u001b[0m\n\n"}
{"message":"module `PolynomialRing_instance` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1003,"byte_end":1026,"line_start":62,"line_end":62,"column_start":21,"column_end":44,"is_primary":true,"text":[{"text":"            pub mod PolynomialRing_instance;","highlight_start":21,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1003,"byte_end":1026,"line_start":62,"line_end":62,"column_start":21,"column_end":44,"is_primary":true,"text":[{"text":"            pub mod PolynomialRing_instance;","highlight_start":21,"highlight_end":44}],"label":null,"suggested_replacement":"polynomial_ring_instance","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `PolynomialRing_instance` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:62:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pub mod PolynomialRing_instance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `polynomial_ring_instance`\u001b[0m\n\n"}
{"message":"module `EllipticCurves` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1083,"byte_end":1097,"line_start":68,"line_end":68,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"        pub mod EllipticCurves {","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1083,"byte_end":1097,"line_start":68,"line_end":68,"column_start":17,"column_end":31,"is_primary":true,"text":[{"text":"        pub mod EllipticCurves {","highlight_start":17,"highlight_end":31}],"label":null,"suggested_replacement":"elliptic_curves","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `EllipticCurves` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:68:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod EllipticCurves {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `elliptic_curves`\u001b[0m\n\n"}
{"message":"module `Zmod` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1521,"byte_end":1525,"line_start":82,"line_end":82,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"            pub mod Zmod;","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1521,"byte_end":1525,"line_start":82,"line_end":82,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"            pub mod Zmod;","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":"zmod","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `Zmod` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:82:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m82\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pub mod Zmod;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `zmod`\u001b[0m\n\n"}
{"message":"module `Zmod_instance` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":1586,"byte_end":1599,"line_start":86,"line_end":86,"column_start":21,"column_end":34,"is_primary":true,"text":[{"text":"            pub mod Zmod_instance;","highlight_start":21,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":1586,"byte_end":1599,"line_start":86,"line_end":86,"column_start":21,"column_end":34,"is_primary":true,"text":[{"text":"            pub mod Zmod_instance;","highlight_start":21,"highlight_end":34}],"label":null,"suggested_replacement":"zmod_instance","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `Zmod_instance` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:86:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            pub mod Zmod_instance;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `zmod_instance`\u001b[0m\n\n"}
{"message":"structure field `DOUBLEROU` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":535,"byte_end":544,"line_start":18,"line_end":18,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    pub DOUBLEROU: bool,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":535,"byte_end":544,"line_start":18,"line_end":18,"column_start":9,"column_end":18,"is_primary":true,"text":[{"text":"    pub DOUBLEROU: bool,","highlight_start":9,"highlight_end":18}],"label":null,"suggested_replacement":"doublerou","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `DOUBLEROU` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:18:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub DOUBLEROU: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `doublerou`\u001b[0m\n\n"}
{"message":"structure field `DEBUG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":560,"byte_end":565,"line_start":19,"line_end":19,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    pub DEBUG: bool,","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":560,"byte_end":565,"line_start":19,"line_end":19,"column_start":9,"column_end":14,"is_primary":true,"text":[{"text":"    pub DEBUG: bool,","highlight_start":9,"highlight_end":14}],"label":null,"suggested_replacement":"debug","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `DEBUG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:19:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub DEBUG: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `debug`\u001b[0m\n\n"}
{"message":"structure field `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":581,"byte_end":582,"line_start":20,"line_end":20,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    pub N: usize,","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":581,"byte_end":582,"line_start":20,"line_end":20,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"    pub N: usize,","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: structure field `N` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:20:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub N: usize,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `DOUBLEROU` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":927,"byte_end":936,"line_start":36,"line_end":36,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"    pub fn new(DOUBLEROU: bool, DEBUG: bool,","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":927,"byte_end":936,"line_start":36,"line_end":36,"column_start":16,"column_end":25,"is_primary":true,"text":[{"text":"    pub fn new(DOUBLEROU: bool, DEBUG: bool,","highlight_start":16,"highlight_end":25}],"label":null,"suggested_replacement":"doublerou","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `DOUBLEROU` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:36:16\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(DOUBLEROU: bool, DEBUG: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `doublerou`\u001b[0m\n\n"}
{"message":"variable `DEBUG` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":944,"byte_end":949,"line_start":36,"line_end":36,"column_start":33,"column_end":38,"is_primary":true,"text":[{"text":"    pub fn new(DOUBLEROU: bool, DEBUG: bool,","highlight_start":33,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":944,"byte_end":949,"line_start":36,"line_end":36,"column_start":33,"column_end":38,"is_primary":true,"text":[{"text":"    pub fn new(DOUBLEROU: bool, DEBUG: bool,","highlight_start":33,"highlight_end":38}],"label":null,"suggested_replacement":"debug","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `DEBUG` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:36:33\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn new(DOUBLEROU: bool, DEBUG: bool,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `debug`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":965,"byte_end":966,"line_start":37,"line_end":37,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        N: usize,","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":965,"byte_end":966,"line_start":37,"line_end":37,"column_start":9,"column_end":10,"is_primary":true,"text":[{"text":"        N: usize,","highlight_start":9,"highlight_end":10}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:37:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m37\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        N: usize,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":1614,"byte_end":1615,"line_start":56,"line_end":56,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    pub fn generate_ntt_prime(N: usize, bit_length: usize, DOUBLEROU: bool) -> (Option<BigInt>, Option<BigInt>) {","highlight_start":31,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":1614,"byte_end":1615,"line_start":56,"line_end":56,"column_start":31,"column_end":32,"is_primary":true,"text":[{"text":"    pub fn generate_ntt_prime(N: usize, bit_length: usize, DOUBLEROU: bool) -> (Option<BigInt>, Option<BigInt>) {","highlight_start":31,"highlight_end":32}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:56:31\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn generate_ntt_prime(N: usize, bit_length: usize, DOUBLEROU: bool) -> (Option<BigInt>, Option<BigInt>) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `DOUBLEROU` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":1643,"byte_end":1652,"line_start":56,"line_end":56,"column_start":60,"column_end":69,"is_primary":true,"text":[{"text":"    pub fn generate_ntt_prime(N: usize, bit_length: usize, DOUBLEROU: bool) -> (Option<BigInt>, Option<BigInt>) {","highlight_start":60,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":1643,"byte_end":1652,"line_start":56,"line_end":56,"column_start":60,"column_end":69,"is_primary":true,"text":[{"text":"    pub fn generate_ntt_prime(N: usize, bit_length: usize, DOUBLEROU: bool) -> (Option<BigInt>, Option<BigInt>) {","highlight_start":60,"highlight_end":69}],"label":null,"suggested_replacement":"doublerou","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `DOUBLEROU` should have a snake case name\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:56:60\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m56\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn generate_ntt_prime(N: usize, bit_length: usize, DOUBLEROU: bool) -> (Option<BigInt>, Option<BigInt>) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `doublerou`\u001b[0m\n\n"}
{"message":"variable `DOUBLEROU` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":4011,"byte_end":4020,"line_start":135,"line_end":135,"column_start":71,"column_end":80,"is_primary":true,"text":[{"text":"    pub fn get_primitive_root_through_generator(q: BigInt, k: BigInt, DOUBLEROU: bool) -> Option<BigInt>{","highlight_start":71,"highlight_end":80}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":4011,"byte_end":4020,"line_start":135,"line_end":135,"column_start":71,"column_end":80,"is_primary":true,"text":[{"text":"    pub fn get_primitive_root_through_generator(q: BigInt, k: BigInt, DOUBLEROU: bool) -> Option<BigInt>{","highlight_start":71,"highlight_end":80}],"label":null,"suggested_replacement":"doublerou","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `DOUBLEROU` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:135:71\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_primitive_root_through_generator(q: BigInt, k: BigInt, DOUBLEROU: bool) -> Option<BigInt>{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `doublerou`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6272,"byte_end":6273,"line_start":210,"line_end":210,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn gen_powers(N: usize, q: BigInt, zeta: BigInt, findeg: usize) -> Vec<BigInt> {","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6272,"byte_end":6273,"line_start":210,"line_end":210,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn gen_powers(N: usize, q: BigInt, zeta: BigInt, findeg: usize) -> Vec<BigInt> {","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:210:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m210\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn gen_powers(N: usize, q: BigInt, zeta: BigInt, findeg: usize) -> Vec<BigInt> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6399,"byte_end":6401,"line_start":212,"line_end":212,"column_start":21,"column_end":23,"is_primary":true,"text":[{"text":"            let mut N_ : usize;","highlight_start":21,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":6399,"byte_end":6401,"line_start":212,"line_end":212,"column_start":21,"column_end":23,"is_primary":true,"text":[{"text":"            let mut N_ : usize;","highlight_start":21,"highlight_end":23}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:212:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m212\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut N_ : usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N_` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":7174,"byte_end":7176,"line_start":234,"line_end":234,"column_start":21,"column_end":23,"is_primary":true,"text":[{"text":"            let mut N_: usize = N/2;","highlight_start":21,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":7174,"byte_end":7176,"line_start":234,"line_end":234,"column_start":21,"column_end":23,"is_primary":true,"text":[{"text":"            let mut N_: usize = N/2;","highlight_start":21,"highlight_end":23}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N_` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:234:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let mut N_: usize = N/2;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":8235,"byte_end":8236,"line_start":262,"line_end":262,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"    pub fn gen_twiddles(N: usize, q: BigInt, zeta: BigInt, powers: Vec<BigInt>) -> (Vec<BigInt>, Vec<BigInt>) {","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":8235,"byte_end":8236,"line_start":262,"line_end":262,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"    pub fn gen_twiddles(N: usize, q: BigInt, zeta: BigInt, powers: Vec<BigInt>) -> (Vec<BigInt>, Vec<BigInt>) {","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:262:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m262\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn gen_twiddles(N: usize, q: BigInt, zeta: BigInt, powers: Vec<BigInt>) -> (Vec<BigInt>, Vec<BigInt>) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":9011,"byte_end":9012,"line_start":282,"line_end":282,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"    fn exist_small_n(r: BigInt, q: BigInt, N: usize) -> bool{","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":9011,"byte_end":9012,"line_start":282,"line_end":282,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"    fn exist_small_n(r: BigInt, q: BigInt, N: usize) -> bool{","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:282:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m282\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn exist_small_n(r: BigInt, q: BigInt, N: usize) -> bool{\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":9248,"byte_end":9249,"line_start":292,"line_end":292,"column_start":45,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn get_nth_root_of_unity(q: BigInt, N: usize) -> BigInt {","highlight_start":45,"highlight_end":46}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":9248,"byte_end":9249,"line_start":292,"line_end":292,"column_start":45,"column_end":46,"is_primary":true,"text":[{"text":"    pub fn get_nth_root_of_unity(q: BigInt, N: usize) -> BigInt {","highlight_start":45,"highlight_end":46}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:292:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m292\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn get_nth_root_of_unity(q: BigInt, N: usize) -> BigInt {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":10105,"byte_end":10106,"line_start":319,"line_end":319,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    pub fn cooley_tukey_iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T:  Instance + Clone + Operand {","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":10105,"byte_end":10106,"line_start":319,"line_end":319,"column_start":42,"column_end":43,"is_primary":true,"text":[{"text":"    pub fn cooley_tukey_iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T:  Instance + Clone + Operand {","highlight_start":42,"highlight_end":43}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:319:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn cooley_tukey_iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T:  Instance + Clone + Operand {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `W` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":10126,"byte_end":10127,"line_start":319,"line_end":319,"column_start":63,"column_end":64,"is_primary":true,"text":[{"text":"    pub fn cooley_tukey_iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T:  Instance + Clone + Operand {","highlight_start":63,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":10126,"byte_end":10127,"line_start":319,"line_end":319,"column_start":63,"column_end":64,"is_primary":true,"text":[{"text":"    pub fn cooley_tukey_iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T:  Instance + Clone + Operand {","highlight_start":63,"highlight_end":64}],"label":null,"suggested_replacement":"w","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `W` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:319:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m319\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn cooley_tukey_iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T:  Instance + Clone + Operand {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                              \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `w`\u001b[0m\n\n"}
{"message":"variable `P` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11043,"byte_end":11044,"line_start":343,"line_end":343,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                    let P = (j.clone() >> shift_bits) << shift_bits;","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11043,"byte_end":11044,"line_start":343,"line_end":343,"column_start":25,"column_end":26,"is_primary":true,"text":[{"text":"                    let P = (j.clone() >> shift_bits) << shift_bits;","highlight_start":25,"highlight_end":26}],"label":null,"suggested_replacement":"p","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `P` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:343:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m343\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let P = (j.clone() >> shift_bits) << shift_bits;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `p`\u001b[0m\n\n"}
{"message":"variable `w_P` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11112,"byte_end":11115,"line_start":344,"line_end":344,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"                    let w_P = W.modpow(&BigInt::from(P), &q);","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11112,"byte_end":11115,"line_start":344,"line_end":344,"column_start":25,"column_end":28,"is_primary":true,"text":[{"text":"                    let w_P = W.modpow(&BigInt::from(P), &q);","highlight_start":25,"highlight_end":28}],"label":null,"suggested_replacement":"w_p","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `w_P` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:344:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m344\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let w_P = W.modpow(&BigInt::from(P), &q);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `w_p`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11895,"byte_end":11896,"line_start":371,"line_end":371,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11895,"byte_end":11896,"line_start":371,"line_end":371,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:371:23\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `W` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11916,"byte_end":11917,"line_start":371,"line_end":371,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":11916,"byte_end":11917,"line_start":371,"line_end":371,"column_start":44,"column_end":45,"is_primary":true,"text":[{"text":"    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":44,"highlight_end":45}],"label":null,"suggested_replacement":"w","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `W` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:371:44\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m371\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn boh_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32, zetas: Vec<BigInt>) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `w`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":12902,"byte_end":12903,"line_start":407,"line_end":407,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"    pub fn iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":12902,"byte_end":12903,"line_start":407,"line_end":407,"column_start":29,"column_end":30,"is_primary":true,"text":[{"text":"    pub fn iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":29,"highlight_end":30}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:407:29\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `W` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":12923,"byte_end":12924,"line_start":407,"line_end":407,"column_start":50,"column_end":51,"is_primary":true,"text":[{"text":"    pub fn iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":50,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":12923,"byte_end":12924,"line_start":407,"line_end":407,"column_start":50,"column_end":51,"is_primary":true,"text":[{"text":"    pub fn iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {","highlight_start":50,"highlight_end":51}],"label":null,"suggested_replacement":"w","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `W` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:407:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m407\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn iterative_ntt<T>(N: usize, q: BigInt, W: BigInt, coefficients: Vec<T>, prec: i32) -> Vec<ZmodInstance> where T: Instance + Clone + Operand {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `w`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":13996,"byte_end":13997,"line_start":439,"line_end":439,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let N = self.N;","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":13996,"byte_end":13997,"line_start":439,"line_end":439,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let N = self.N;","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:439:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m439\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let N = self.N;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":17566,"byte_end":17567,"line_start":544,"line_end":544,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let N = coefficients.len();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":17566,"byte_end":17567,"line_start":544,"line_end":544,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let N = coefficients.len();","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:544:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m544\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let N = coefficients.len();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18021,"byte_end":18022,"line_start":561,"line_end":561,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn cooley_tukey_iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18021,"byte_end":18022,"line_start":561,"line_end":561,"column_start":40,"column_end":41,"is_primary":true,"text":[{"text":"    pub fn cooley_tukey_iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {","highlight_start":40,"highlight_end":41}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:561:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn cooley_tukey_iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `W_inv` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18042,"byte_end":18047,"line_start":561,"line_end":561,"column_start":61,"column_end":66,"is_primary":true,"text":[{"text":"    pub fn cooley_tukey_iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {","highlight_start":61,"highlight_end":66}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18042,"byte_end":18047,"line_start":561,"line_end":561,"column_start":61,"column_end":66,"is_primary":true,"text":[{"text":"    pub fn cooley_tukey_iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {","highlight_start":61,"highlight_end":66}],"label":null,"suggested_replacement":"w_inv","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `W_inv` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:561:61\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m561\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn cooley_tukey_iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `w_inv`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18501,"byte_end":18502,"line_start":570,"line_end":570,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18501,"byte_end":18502,"line_start":570,"line_end":570,"column_start":21,"column_end":22,"is_primary":true,"text":[{"text":"    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {","highlight_start":21,"highlight_end":22}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:570:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `W_inv` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18522,"byte_end":18527,"line_start":570,"line_end":570,"column_start":42,"column_end":47,"is_primary":true,"text":[{"text":"    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {","highlight_start":42,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":18522,"byte_end":18527,"line_start":570,"line_end":570,"column_start":42,"column_end":47,"is_primary":true,"text":[{"text":"    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {","highlight_start":42,"highlight_end":47}],"label":null,"suggested_replacement":"w_inv","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `W_inv` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:570:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m570\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn boh_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt, zetas: Vec<BigInt>) -> Vec<ZmodInstance> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `w_inv`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":19578,"byte_end":19579,"line_start":604,"line_end":604,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"    pub fn iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {","highlight_start":27,"highlight_end":28}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":19578,"byte_end":19579,"line_start":604,"line_end":604,"column_start":27,"column_end":28,"is_primary":true,"text":[{"text":"    pub fn iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {","highlight_start":27,"highlight_end":28}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:604:27\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `W_inv` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":19599,"byte_end":19604,"line_start":604,"line_end":604,"column_start":48,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {","highlight_start":48,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":19599,"byte_end":19604,"line_start":604,"line_end":604,"column_start":48,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {","highlight_start":48,"highlight_end":53}],"label":null,"suggested_replacement":"w_inv","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `W_inv` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:604:48\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m604\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn iterative_intt(N: usize, q: BigInt, W_inv: BigInt, coefficients: Vec<ZmodInstance>, prec: i32, ntt_inv: BigInt) -> Vec<ZmodInstance> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `w_inv`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":22888,"byte_end":22889,"line_start":689,"line_end":689,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn init(N: usize, q: BigInt, zeta: BigInt, ntt_algorithm: NTT_Algorithm) -> NTT {","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":22888,"byte_end":22889,"line_start":689,"line_end":689,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn init(N: usize, q: BigInt, zeta: BigInt, ntt_algorithm: NTT_Algorithm) -> NTT {","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:689:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m689\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn init(N: usize, q: BigInt, zeta: BigInt, ntt_algorithm: NTT_Algorithm) -> NTT {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `N2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/transform/ntt.rs","byte_start":22979,"byte_end":22981,"line_start":691,"line_end":691,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"        let mut N2: usize;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/transform/ntt.rs","byte_start":22979,"byte_end":22981,"line_start":691,"line_end":691,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"        let mut N2: usize;","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":"n2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/transform/ntt.rs:691:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m691\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let mut N2: usize;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n2`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":6995,"byte_end":6996,"line_start":158,"line_end":158,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let A: Matrix<PolynomialRingInstance<ZmodInstance>> = Matrix::new(vectors_of_public_key, k, k);","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":6995,"byte_end":6996,"line_start":158,"line_end":158,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let A: Matrix<PolynomialRingInstance<ZmodInstance>> = Matrix::new(vectors_of_public_key, k, k);","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:158:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m158\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let A: Matrix<PolynomialRingInstance<ZmodInstance>> = Matrix::new(vectors_of_public_key, k, k);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9908,"byte_end":9909,"line_start":211,"line_end":211,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":9908,"byte_end":9909,"line_start":211,"line_end":211,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:211:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m211\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut A, mut b) = self.public_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `U` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":11083,"byte_end":11084,"line_start":233,"line_end":233,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let U: Vector<PolynomialRingInstance<ZmodInstance>> = Vector::new(decomp_u);    ","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":11083,"byte_end":11084,"line_start":233,"line_end":233,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let U: Vector<PolynomialRingInstance<ZmodInstance>> = Vector::new(decomp_u);    ","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"u","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `U` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:233:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m233\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let U: Vector<PolynomialRingInstance<ZmodInstance>> = Vector::new(decomp_u);    \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `u`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":14594,"byte_end":14595,"line_start":314,"line_end":314,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let A: Matrix<PolynomialRingInstance<ZmodInstance>> = Matrix::new(vectors_of_public_key, k, k);","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":14594,"byte_end":14595,"line_start":314,"line_end":314,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let A: Matrix<PolynomialRingInstance<ZmodInstance>> = Matrix::new(vectors_of_public_key, k, k);","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:314:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m314\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let A: Matrix<PolynomialRingInstance<ZmodInstance>> = Matrix::new(vectors_of_public_key, k, k);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":17507,"byte_end":17508,"line_start":367,"line_end":367,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":17507,"byte_end":17508,"line_start":367,"line_end":367,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:367:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m367\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut A, mut b) = self.public_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `U` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":18682,"byte_end":18683,"line_start":389,"line_end":389,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let U: Vector<PolynomialRingInstance<ZmodInstance>> = Vector::new(decomp_u);    ","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":18682,"byte_end":18683,"line_start":389,"line_end":389,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let U: Vector<PolynomialRingInstance<ZmodInstance>> = Vector::new(decomp_u);    ","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"u","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `U` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:389:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let U: Vector<PolynomialRingInstance<ZmodInstance>> = Vector::new(decomp_u);    \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `u`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":22193,"byte_end":22194,"line_start":469,"line_end":469,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let A: Matrix<PolynomialRingInstance<ZmodInstance>> = Matrix::new(vectors_of_public_key, k, k);","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":22193,"byte_end":22194,"line_start":469,"line_end":469,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let A: Matrix<PolynomialRingInstance<ZmodInstance>> = Matrix::new(vectors_of_public_key, k, k);","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:469:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m469\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let A: Matrix<PolynomialRingInstance<ZmodInstance>> = Matrix::new(vectors_of_public_key, k, k);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `A` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":25107,"byte_end":25108,"line_start":521,"line_end":521,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":25107,"byte_end":25108,"line_start":521,"line_end":521,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"        let (mut A, mut b) = self.public_keys[self.primary_key].clone();","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":"a","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `A` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:521:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m521\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (mut A, mut b) = self.public_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `a`\u001b[0m\n\n"}
{"message":"variable `U` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":26282,"byte_end":26283,"line_start":543,"line_end":543,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let U: Vector<PolynomialRingInstance<ZmodInstance>> = Vector::new(decomp_u);    ","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/asymmetric/primitives/kyber.rs","byte_start":26282,"byte_end":26283,"line_start":543,"line_end":543,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let U: Vector<PolynomialRingInstance<ZmodInstance>> = Vector::new(decomp_u);    ","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"u","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `U` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/asymmetric/primitives/kyber.rs:543:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m543\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let U: Vector<PolynomialRingInstance<ZmodInstance>> = Vector::new(decomp_u);    \u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `u`\u001b[0m\n\n"}
{"message":"variable `C1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":296,"byte_end":298,"line_start":6,"line_end":6,"column_start":36,"column_end":38,"is_primary":true,"text":[{"text":"    fn homomorphic_addition(&self, C1: T, C2: T) -> T;","highlight_start":36,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":296,"byte_end":298,"line_start":6,"line_end":6,"column_start":36,"column_end":38,"is_primary":true,"text":[{"text":"    fn homomorphic_addition(&self, C1: T, C2: T) -> T;","highlight_start":36,"highlight_end":38}],"label":null,"suggested_replacement":"c1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C1` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/interfaces/interfaces.rs:6:36\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn homomorphic_addition(&self, C1: T, C2: T) -> T;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c1`\u001b[0m\n\n"}
{"message":"variable `C2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":303,"byte_end":305,"line_start":6,"line_end":6,"column_start":43,"column_end":45,"is_primary":true,"text":[{"text":"    fn homomorphic_addition(&self, C1: T, C2: T) -> T;","highlight_start":43,"highlight_end":45}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":303,"byte_end":305,"line_start":6,"line_end":6,"column_start":43,"column_end":45,"is_primary":true,"text":[{"text":"    fn homomorphic_addition(&self, C1: T, C2: T) -> T;","highlight_start":43,"highlight_end":45}],"label":null,"suggested_replacement":"c2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C2` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/interfaces/interfaces.rs:6:43\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn homomorphic_addition(&self, C1: T, C2: T) -> T;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c2`\u001b[0m\n\n"}
{"message":"variable `C1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":357,"byte_end":359,"line_start":7,"line_end":7,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"    fn homomorphic_multiplication(&self, C1: T, C2: T) -> T;","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":357,"byte_end":359,"line_start":7,"line_end":7,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"    fn homomorphic_multiplication(&self, C1: T, C2: T) -> T;","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":"c1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C1` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/interfaces/interfaces.rs:7:42\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn homomorphic_multiplication(&self, C1: T, C2: T) -> T;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c1`\u001b[0m\n\n"}
{"message":"variable `C2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":364,"byte_end":366,"line_start":7,"line_end":7,"column_start":49,"column_end":51,"is_primary":true,"text":[{"text":"    fn homomorphic_multiplication(&self, C1: T, C2: T) -> T;","highlight_start":49,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/interfaces/interfaces.rs","byte_start":364,"byte_end":366,"line_start":7,"line_end":7,"column_start":49,"column_end":51,"is_primary":true,"text":[{"text":"    fn homomorphic_multiplication(&self, C1: T, C2: T) -> T;","highlight_start":49,"highlight_end":51}],"label":null,"suggested_replacement":"c2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C2` should have a snake case name\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/interfaces/interfaces.rs:7:49\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn homomorphic_multiplication(&self, C1: T, C2: T) -> T;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c2`\u001b[0m\n\n"}
{"message":"variable `N` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":7608,"byte_end":7609,"line_start":187,"line_end":187,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn init(N: usize, p: BigInt, mu: usize, sigma: usize) -> BFV {","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":7608,"byte_end":7609,"line_start":187,"line_end":187,"column_start":17,"column_end":18,"is_primary":true,"text":[{"text":"    pub fn init(N: usize, p: BigInt, mu: usize, sigma: usize) -> BFV {","highlight_start":17,"highlight_end":18}],"label":null,"suggested_replacement":"n","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `N` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:187:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn init(N: usize, p: BigInt, mu: usize, sigma: usize) -> BFV {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `n`\u001b[0m\n\n"}
{"message":"variable `SK1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":9653,"byte_end":9656,"line_start":231,"line_end":231,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let SK1 = self.private_keys[self.primary_key].clone() % ZZ::new().new_instance(module.clone());","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":9653,"byte_end":9656,"line_start":231,"line_end":231,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let SK1 = self.private_keys[self.primary_key].clone() % ZZ::new().new_instance(module.clone());","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"sk1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SK1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:231:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m231\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let SK1 = self.private_keys[self.primary_key].clone() % ZZ::new().new_instance(module.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `sk1`\u001b[0m\n\n"}
{"message":"variable `SK2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":9879,"byte_end":9882,"line_start":234,"line_end":234,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let SK2 = SK1.clone()*SK1.clone();","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":9879,"byte_end":9882,"line_start":234,"line_end":234,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let SK2 = SK1.clone()*SK1.clone();","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"sk2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SK2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:234:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m234\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let SK2 = SK1.clone()*SK1.clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `sk2`\u001b[0m\n\n"}
{"message":"variable `RK1_0` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":9922,"byte_end":9927,"line_start":235,"line_end":235,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"        let RK1_0 = a0.clone()*SK1 + e1;","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":9922,"byte_end":9927,"line_start":235,"line_end":235,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"        let RK1_0 = a0.clone()*SK1 + e1;","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":"rk1_0","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RK1_0` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:235:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let RK1_0 = a0.clone()*SK1 + e1;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rk1_0`\u001b[0m\n\n"}
{"message":"variable `RK1_1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":9963,"byte_end":9968,"line_start":236,"line_end":236,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"        let RK1_1 = SK2*Zmod::new(Some(ZZ::new().new_instance(module.clone()))).apply(kk.clone());","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":9963,"byte_end":9968,"line_start":236,"line_end":236,"column_start":13,"column_end":18,"is_primary":true,"text":[{"text":"        let RK1_1 = SK2*Zmod::new(Some(ZZ::new().new_instance(module.clone()))).apply(kk.clone());","highlight_start":13,"highlight_end":18}],"label":null,"suggested_replacement":"rk1_1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RK1_1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:236:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let RK1_1 = SK2*Zmod::new(Some(ZZ::new().new_instance(module.clone()))).apply(kk.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rk1_1`\u001b[0m\n\n"}
{"message":"variable `RK1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":10062,"byte_end":10065,"line_start":237,"line_end":237,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let RK1 = RK1_1-RK1_0;","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":10062,"byte_end":10065,"line_start":237,"line_end":237,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let RK1 = RK1_1-RK1_0;","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"rk1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RK1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:237:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m237\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let RK1 = RK1_1-RK1_0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rk1`\u001b[0m\n\n"}
{"message":"variable `RK2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":10093,"byte_end":10096,"line_start":238,"line_end":238,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let RK2 = a0;","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":10093,"byte_end":10096,"line_start":238,"line_end":238,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let RK2 = a0;","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"rk2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RK2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:238:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let RK2 = a0;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rk2`\u001b[0m\n\n"}
{"message":"variable `C1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":10189,"byte_end":10191,"line_start":243,"line_end":243,"column_start":52,"column_end":54,"is_primary":true,"text":[{"text":"    pub fn naive_homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":52,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":10189,"byte_end":10191,"line_start":243,"line_end":243,"column_start":52,"column_end":54,"is_primary":true,"text":[{"text":"    pub fn naive_homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":52,"highlight_end":54}],"label":null,"suggested_replacement":"c1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:243:52\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn naive_homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRing\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c1`\u001b[0m\n\n"}
{"message":"variable `C2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":10271,"byte_end":10273,"line_start":243,"line_end":243,"column_start":134,"column_end":136,"is_primary":true,"text":[{"text":"    pub fn naive_homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":134,"highlight_end":136}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":10271,"byte_end":10273,"line_start":243,"line_end":243,"column_start":134,"column_end":136,"is_primary":true,"text":[{"text":"    pub fn naive_homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":134,"highlight_end":136}],"label":null,"suggested_replacement":"c2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:243:134\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m243\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, Polynomia\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c2`\u001b[0m\n\n"}
{"message":"variable `C1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11039,"byte_end":11041,"line_start":258,"line_end":258,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let C1 = a1_tilde.clone()*a2_tilde.clone();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11039,"byte_end":11041,"line_start":258,"line_end":258,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let C1 = a1_tilde.clone()*a2_tilde.clone();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"c1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:258:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m258\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let C1 = a1_tilde.clone()*a2_tilde.clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c1`\u001b[0m\n\n"}
{"message":"variable `C2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11091,"byte_end":11093,"line_start":259,"line_end":259,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let C2 = a1_tilde.clone()*b2_tilde.clone() + a2_tilde.clone()*b1_tilde.clone();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11091,"byte_end":11093,"line_start":259,"line_end":259,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let C2 = a1_tilde.clone()*b2_tilde.clone() + a2_tilde.clone()*b1_tilde.clone();","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"c2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:259:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m259\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let C2 = a1_tilde.clone()*b2_tilde.clone() + a2_tilde.clone()*b1_tilde.clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c2`\u001b[0m\n\n"}
{"message":"variable `C3` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11179,"byte_end":11181,"line_start":260,"line_end":260,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let C3 = b1_tilde.clone()*b2_tilde;","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11179,"byte_end":11181,"line_start":260,"line_end":260,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let C3 = b1_tilde.clone()*b2_tilde;","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"c3","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C3` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:260:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m260\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let C3 = b1_tilde.clone()*b2_tilde;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c3`\u001b[0m\n\n"}
{"message":"variable `SK` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11784,"byte_end":11786,"line_start":278,"line_end":278,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let SK: PolynomialRingInstance<ZmodInstance> = self.ring.apply_ntt_ctxt(&((gen_from_uniform_distribution_with_modulo::<ZZinstance>(BigInt::from(2),self.n-1, q.clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":11784,"byte_end":11786,"line_start":278,"line_end":278,"column_start":13,"column_end":15,"is_primary":true,"text":[{"text":"        let SK: PolynomialRingInstance<ZmodInstance> = self.ring.apply_ntt_ctxt(&((gen_from_uniform_distribution_with_modulo::<ZZinstance>(BigInt::from(2),self.n-1, q.clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));","highlight_start":13,"highlight_end":15}],"label":null,"suggested_replacement":"sk","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SK` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:278:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m278\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let SK: PolynomialRingInstance<ZmodInstance> = self.ring.apply_ntt_ctxt(&((gen_from_uniform_distribution_with_modulo::<ZZinstance>(BigInt::from(2),self.n-1, q.clone()).quotient(self.ri\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `sk`\u001b[0m\n\n"}
{"message":"variable `PK2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":12038,"byte_end":12041,"line_start":281,"line_end":281,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PK2 = self.ring.apply_ntt_ctxt(&((gen_from_uniform_distribution_with_modulo::<ZZinstance>(q.clone(),self.n-1, q.clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":12038,"byte_end":12041,"line_start":281,"line_end":281,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PK2 = self.ring.apply_ntt_ctxt(&((gen_from_uniform_distribution_with_modulo::<ZZinstance>(q.clone(),self.n-1, q.clone()).quotient(self.ring.irreducible_polynomial.clone(), true, false))));","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"pk2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PK2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:281:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m281\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m   let PK2 = self.ring.apply_ntt_ctxt(&((gen_from_uniform_distribution_with_modulo::<ZZinstance>(q.clone(),self.n-1, q.clone()).quotient(self.ring.irreducible_polynomial.clone(), true, fa\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `pk2`\u001b[0m\n\n"}
{"message":"variable `PK1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":12464,"byte_end":12467,"line_start":285,"line_end":285,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PK1 = -(PK2.clone()*SK.clone() +e);","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":12464,"byte_end":12467,"line_start":285,"line_end":285,"column_start":13,"column_end":16,"is_primary":true,"text":[{"text":"        let PK1 = -(PK2.clone()*SK.clone() +e);","highlight_start":13,"highlight_end":16}],"label":null,"suggested_replacement":"pk1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PK1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:285:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m285\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let PK1 = -(PK2.clone()*SK.clone() +e);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `pk1`\u001b[0m\n\n"}
{"message":"variable `SK` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":14138,"byte_end":14140,"line_start":320,"line_end":320,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"            let SK = self.private_keys[self.primary_key].clone();","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":14138,"byte_end":14140,"line_start":320,"line_end":320,"column_start":17,"column_end":19,"is_primary":true,"text":[{"text":"            let SK = self.private_keys[self.primary_key].clone();","highlight_start":17,"highlight_end":19}],"label":null,"suggested_replacement":"sk","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `SK` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:320:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m320\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            let SK = self.private_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `sk`\u001b[0m\n\n"}
{"message":"variable `M` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15507,"byte_end":15508,"line_start":347,"line_end":347,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let M = ((plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false)));","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15507,"byte_end":15508,"line_start":347,"line_end":347,"column_start":13,"column_end":14,"is_primary":true,"text":[{"text":"        let M = ((plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false)));","highlight_start":13,"highlight_end":14}],"label":null,"suggested_replacement":"m","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `M` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:347:13\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m347\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let M = ((plaintext_poly.quotient(self.ring.irreducible_polynomial.clone(), true, false)));\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `m`\u001b[0m\n\n"}
{"message":"variable `PK1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15617,"byte_end":15620,"line_start":350,"line_end":350,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"        let (PK1, PK2) = self.public_keys[self.primary_key].clone();","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15617,"byte_end":15620,"line_start":350,"line_end":350,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"        let (PK1, PK2) = self.public_keys[self.primary_key].clone();","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":"pk1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PK1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:350:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (PK1, PK2) = self.public_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `pk1`\u001b[0m\n\n"}
{"message":"variable `PK2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15622,"byte_end":15625,"line_start":350,"line_end":350,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"        let (PK1, PK2) = self.public_keys[self.primary_key].clone();","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":15622,"byte_end":15625,"line_start":350,"line_end":350,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"        let (PK1, PK2) = self.public_keys[self.primary_key].clone();","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":"pk2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `PK2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:350:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m350\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (PK1, PK2) = self.public_keys[self.primary_key].clone();\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `pk2`\u001b[0m\n\n"}
{"message":"variable `C1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":16942,"byte_end":16944,"line_start":369,"line_end":369,"column_start":36,"column_end":38,"is_primary":true,"text":[{"text":"    fn homomorphic_addition(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":36,"highlight_end":38}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":16942,"byte_end":16944,"line_start":369,"line_end":369,"column_start":36,"column_end":38,"is_primary":true,"text":[{"text":"    fn homomorphic_addition(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":36,"highlight_end":38}],"label":null,"suggested_replacement":"c1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:369:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn homomorphic_addition(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodIns\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c1`\u001b[0m\n\n"}
{"message":"variable `C2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":17024,"byte_end":17026,"line_start":369,"line_end":369,"column_start":118,"column_end":120,"is_primary":true,"text":[{"text":"    fn homomorphic_addition(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":118,"highlight_end":120}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":17024,"byte_end":17026,"line_start":369,"line_end":369,"column_start":118,"column_end":120,"is_primary":true,"text":[{"text":"    fn homomorphic_addition(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":118,"highlight_end":120}],"label":null,"suggested_replacement":"c2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:369:118\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m369\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, Polynomia\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c2`\u001b[0m\n\n"}
{"message":"variable `C1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":17885,"byte_end":17887,"line_start":384,"line_end":384,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"    fn homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":17885,"byte_end":17887,"line_start":384,"line_end":384,"column_start":42,"column_end":44,"is_primary":true,"text":[{"text":"    fn homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":42,"highlight_end":44}],"label":null,"suggested_replacement":"c1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:384:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m384\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<Z\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c1`\u001b[0m\n\n"}
{"message":"variable `C2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":17967,"byte_end":17969,"line_start":384,"line_end":384,"column_start":124,"column_end":126,"is_primary":true,"text":[{"text":"    fn homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":124,"highlight_end":126}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":17967,"byte_end":17969,"line_start":384,"line_end":384,"column_start":124,"column_end":126,"is_primary":true,"text":[{"text":"    fn homomorphic_multiplication(&self, C1: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>) {","highlight_start":124,"highlight_end":126}],"label":null,"suggested_replacement":"c2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:384:124\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m384\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0mZmodInstance>, PolynomialRingInstance<ZmodInstance>), C2: (PolynomialRingInstance<ZmodInstance>, PolynomialRingInstance<ZmodInstance>)) -> (PolynomialRingInstance<ZmodInstance>, Polynomia\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c2`\u001b[0m\n\n"}
{"message":"variable `RK1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18395,"byte_end":18398,"line_start":389,"line_end":389,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"        let (RK1, RK2) = self.relinearization_keygen(kk.clone());","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18395,"byte_end":18398,"line_start":389,"line_end":389,"column_start":14,"column_end":17,"is_primary":true,"text":[{"text":"        let (RK1, RK2) = self.relinearization_keygen(kk.clone());","highlight_start":14,"highlight_end":17}],"label":null,"suggested_replacement":"rk1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RK1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:389:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (RK1, RK2) = self.relinearization_keygen(kk.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rk1`\u001b[0m\n\n"}
{"message":"variable `RK2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18400,"byte_end":18403,"line_start":389,"line_end":389,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"        let (RK1, RK2) = self.relinearization_keygen(kk.clone());","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18400,"byte_end":18403,"line_start":389,"line_end":389,"column_start":19,"column_end":22,"is_primary":true,"text":[{"text":"        let (RK1, RK2) = self.relinearization_keygen(kk.clone());","highlight_start":19,"highlight_end":22}],"label":null,"suggested_replacement":"rk2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `RK2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:389:19\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m389\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (RK1, RK2) = self.relinearization_keygen(kk.clone());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `rk2`\u001b[0m\n\n"}
{"message":"variable `C1` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18461,"byte_end":18463,"line_start":390,"line_end":390,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"        let (C1, C2, C3) = self.naive_homomorphic_multiplication(C1, C2);","highlight_start":14,"highlight_end":16}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18461,"byte_end":18463,"line_start":390,"line_end":390,"column_start":14,"column_end":16,"is_primary":true,"text":[{"text":"        let (C1, C2, C3) = self.naive_homomorphic_multiplication(C1, C2);","highlight_start":14,"highlight_end":16}],"label":null,"suggested_replacement":"c1","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C1` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:390:14\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (C1, C2, C3) = self.naive_homomorphic_multiplication(C1, C2);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m             \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c1`\u001b[0m\n\n"}
{"message":"variable `C2` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18465,"byte_end":18467,"line_start":390,"line_end":390,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        let (C1, C2, C3) = self.naive_homomorphic_multiplication(C1, C2);","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18465,"byte_end":18467,"line_start":390,"line_end":390,"column_start":18,"column_end":20,"is_primary":true,"text":[{"text":"        let (C1, C2, C3) = self.naive_homomorphic_multiplication(C1, C2);","highlight_start":18,"highlight_end":20}],"label":null,"suggested_replacement":"c2","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C2` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:390:18\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (C1, C2, C3) = self.naive_homomorphic_multiplication(C1, C2);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c2`\u001b[0m\n\n"}
{"message":"variable `C3` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18469,"byte_end":18471,"line_start":390,"line_end":390,"column_start":22,"column_end":24,"is_primary":true,"text":[{"text":"        let (C1, C2, C3) = self.naive_homomorphic_multiplication(C1, C2);","highlight_start":22,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/cryptography/homomorphic/primitives/bfv.rs","byte_start":18469,"byte_end":18471,"line_start":390,"line_end":390,"column_start":22,"column_end":24,"is_primary":true,"text":[{"text":"        let (C1, C2, C3) = self.naive_homomorphic_multiplication(C1, C2);","highlight_start":22,"highlight_end":24}],"label":null,"suggested_replacement":"c3","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: variable `C3` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/cryptography/homomorphic/primitives/bfv.rs:390:22\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m390\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let (C1, C2, C3) = self.naive_homomorphic_multiplication(C1, C2);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case (notice the capitalization): `c3`\u001b[0m\n\n"}
{"message":"module `AES` should have a snake case name","code":{"code":"non_snake_case","explanation":null},"level":"warning","spans":[{"file_name":"src/lib.rs","byte_start":2093,"byte_end":2096,"line_start":118,"line_end":118,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"        pub mod AES {","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"convert the identifier to snake case","code":null,"level":"help","spans":[{"file_name":"src/lib.rs","byte_start":2093,"byte_end":2096,"line_start":118,"line_end":118,"column_start":17,"column_end":20,"is_primary":true,"text":[{"text":"        pub mod AES {","highlight_start":17,"highlight_end":20}],"label":null,"suggested_replacement":"aes","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: module `AES` should have a snake case name\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/lib.rs:118:17\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        pub mod AES {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: convert the identifier to snake case: `aes`\u001b[0m\n\n"}
{"message":"273 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 273 warnings emitted\u001b[0m\n\n"}
